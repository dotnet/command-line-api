<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

// Copyright (c) .NET Foundation and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// WARINING: Generated code.

using System.CommandLine.Binding;
using System.Reflection;
using System.Threading.Tasks;

namespace System.CommandLine.Invocation
{
    public static class CommandHandler
    {
        public static ICommandHandler Create(MethodInfo method) =>
            HandlerDescriptor.FromMethodInfo(method).GetCommandHandler();

        public static ICommandHandler Create(Action action) =>
            HandlerDescriptor.FromDelegate(action).GetCommandHandler();

<#
       for (var i = 1; i < 17; i++)
       {
          var ts = "T1";
          for (var j = 2; j <= i; j++)
          {
            ts = $"{ts}, T{j}";
          }
#>
        public static ICommandHandler Create<<#= ts #>>(
            Action<<#= ts #>> action) =>
            HandlerDescriptor.FromDelegate(action).GetCommandHandler();

<#
       }
#>

        public static ICommandHandler Create(Func<int> action) =>
            HandlerDescriptor.FromDelegate(action).GetCommandHandler();

<#
       for (var i = 1; i < 17; i++)
       {
          var ts = "T1";
          for (var j = 2; j <= i; j++)
          {
            ts = $"{ts}, T{j}";
          }
#>
        public static ICommandHandler Create<<#= ts #>>(
            Func<<#= ts #>, int> action) =>
            HandlerDescriptor.FromDelegate(action).GetCommandHandler();

<#
       }
#>

        public static ICommandHandler Create(Func<Task> action) =>
            HandlerDescriptor.FromDelegate(action).GetCommandHandler();

<#
       for (var i = 1; i < 17; i++)
       {
          var ts = "T1";
          for (var j = 2; j <= i; j++)
          {
            ts = $"{ts}, T{j}";
          }
#>
        public static ICommandHandler Create<<#= ts #>>(
            Func<<#= ts #>, Task> action) =>
            HandlerDescriptor.FromDelegate(action).GetCommandHandler();

<#
       }
#>


        public static ICommandHandler Create(Func<Task<int>> action) =>
            HandlerDescriptor.FromDelegate(action).GetCommandHandler();

<#
       for (var i = 1; i < 17; i++)
       {
          var ts = "T1";
          for (var j = 2; j <= i; j++)
          {
            ts = $"{ts}, T{j}";
          }
#>
        public static ICommandHandler Create<<#= ts #>>(
            Func<<#= ts #>, Task<int>> action) =>
            HandlerDescriptor.FromDelegate(action).GetCommandHandler();

<#
       }
#>

        internal static async Task<int> GetResultCodeAsync(object value, InvocationContext context)
        {
            switch (value)
            {
                case Task<int> resultCodeTask:
                    return await resultCodeTask;
                case Task task:
                    await task;
                    return context.ResultCode;
                case int resultCode:
                    return resultCode;
                case null:
                    return context.ResultCode;
                default:
                    throw new NotSupportedException();
            }
        }
    }
}
