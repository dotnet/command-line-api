System.CommandLine.Hosting
  public static class DirectiveConfigurationExtensions
    public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLineDirectives(System.CommandLine.Parsing.ParseResult commandline, System.String name)
  public static class HostingExtensions
    public static OptionsBuilder<TOptions> BindCommandLine<TOptions>()
    public static Microsoft.Extensions.Hosting.IHost GetHost()
    public static System.CommandLine.Invocation.InvocationContext GetInvocationContext()
    public static System.CommandLine.Invocation.InvocationContext GetInvocationContext()
    public static Microsoft.Extensions.Hosting.IHostBuilder UseCommandHandler<TCommand, THandler>()
    public static Microsoft.Extensions.Hosting.IHostBuilder UseCommandHandler(System.Type commandType, System.Type handlerType)
    public static System.CommandLine.Builder.CommandLineBuilder UseHost(System.Func<System.String[],Microsoft.Extensions.Hosting.IHostBuilder> hostBuilderFactory, System.Action<Microsoft.Extensions.Hosting.IHostBuilder> configureHost = null)
    public static System.CommandLine.Builder.CommandLineBuilder UseHost(System.Action<Microsoft.Extensions.Hosting.IHostBuilder> configureHost = null)
    public static Microsoft.Extensions.Hosting.IHostBuilder UseInvocationLifetime(System.CommandLine.Invocation.InvocationContext invocation, System.Action<InvocationLifetimeOptions> configureOptions = null)
  public class InvocationLifetime, Microsoft.Extensions.Hosting.IHostLifetime
    .ctor(Microsoft.Extensions.Options.IOptions<InvocationLifetimeOptions> options, Microsoft.Extensions.Hosting.IHostEnvironment environment, Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime, System.CommandLine.Invocation.InvocationContext context = null, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null)
    public Microsoft.Extensions.Hosting.IHostApplicationLifetime ApplicationLifetime { get; }
    public Microsoft.Extensions.Hosting.IHostEnvironment Environment { get; }
    public InvocationLifetimeOptions Options { get; }
    public System.Void Dispose()
    public System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken)
    public System.Threading.Tasks.Task WaitForStartAsync(System.Threading.CancellationToken cancellationToken)
  public class InvocationLifetimeOptions : Microsoft.Extensions.Hosting.ConsoleLifetimeOptions
    .ctor()
