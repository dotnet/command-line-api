System.CommandLine
  public class Argument : Symbol, System.CommandLine.Binding.IValueDescriptor, System.CommandLine.Completions.ICompletionSource, IArgument, ISymbol
    .ctor()
    .ctor(System.String name)
    public IArgumentArity Arity { get; set; }
    public CompletionSourceList Completions { get; }
    public System.Boolean HasDefaultValue { get; }
    public System.Type ValueType { get; set; }
    public System.Void AddValidator(System.CommandLine.Parsing.ValidateSymbolResult<System.CommandLine.Parsing.ArgumentResult> validate)
     System.String get_DefaultName()
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.CommandLine.Completions.CompletionContext context)
    public System.Object GetDefaultValue()
    public System.Void SetDefaultValue(System.Object value)
    public System.Void SetDefaultValueFactory(System.Func<System.Object> getDefaultValue)
    public System.Void SetDefaultValueFactory(System.Func<System.CommandLine.Parsing.ArgumentResult,System.Object> getDefaultValue)
    public System.String ToString()
  public class Argument<T> : Argument, IValueDescriptor<T>, System.CommandLine.Binding.IValueDescriptor, System.CommandLine.Completions.ICompletionSource, IArgument, ISymbol
    .ctor()
    .ctor(System.String name, System.String description = null)
    .ctor(System.String name, Func<T> getDefaultValue, System.String description = null)
    .ctor(Func<T> getDefaultValue)
    .ctor(System.String name, ParseArgument<T> parse, System.Boolean isDefault = False, System.String description = null)
    .ctor(ParseArgument<T> parse, System.Boolean isDefault = False)
    public System.Type ValueType { get; set; }
  public class ArgumentArity, IArgumentArity
    public static IArgumentArity ExactlyOne { get; }
    public static IArgumentArity OneOrMore { get; }
    public static IArgumentArity Zero { get; }
    public static IArgumentArity ZeroOrMore { get; }
    public static IArgumentArity ZeroOrOne { get; }
    .ctor(System.Int32 minimumNumberOfValues, System.Int32 maximumNumberOfValues)
    public System.Int32 MaximumNumberOfValues { get; }
    public System.Int32 MinimumNumberOfValues { get; }
  public static class ArgumentExtensions
    public static TArgument AddCompletions<TArgument>(System.String[] values)
    public static TArgument AddCompletions<TArgument>(System.CommandLine.Completions.CompletionDelegate complete)
    public static Argument<System.IO.FileInfo> ExistingOnly()
    public static Argument<System.IO.DirectoryInfo> ExistingOnly()
    public static Argument<System.IO.FileSystemInfo> ExistingOnly()
    public static Argument<T> ExistingOnly<T>()
    public static TArgument FromAmong<TArgument>(System.String[] values)
    public static TArgument LegalFileNamesOnly<TArgument>()
    public static TArgument LegalFilePathsOnly<TArgument>()
    public static System.CommandLine.Parsing.ParseResult Parse(System.String commandLine)
    public static System.CommandLine.Parsing.ParseResult Parse(System.String[] args)
  public class Command : IdentifierSymbol, System.Collections.Generic.IEnumerable<Symbol>, System.Collections.IEnumerable, System.CommandLine.Completions.ICompletionSource, ICommand, IIdentifierSymbol, ISymbol
    .ctor(System.String name, System.String description = null)
    public System.Collections.Generic.IReadOnlyList<Argument> Arguments { get; }
    public System.Collections.Generic.IReadOnlyList<Option> GlobalOptions { get; }
    public System.CommandLine.Invocation.ICommandHandler Handler { get; set; }
    public System.Collections.Generic.IReadOnlyList<Option> Options { get; }
    public System.Boolean TreatUnmatchedTokensAsErrors { get; set; }
    public System.Void Add(Symbol symbol)
    public System.Void Add(Argument argument)
    public System.Void AddAlias(System.String alias)
     System.Void AddAliasInner(System.String alias)
    public System.Void AddArgument(Argument argument)
    public System.Void AddCommand(Command command)
    public System.Void AddGlobalOption(Option option)
    public System.Void AddOption(Option option)
     System.Void AddSymbol(Symbol symbol)
    public System.Void AddValidator(System.CommandLine.Parsing.ValidateSymbolResult<System.CommandLine.Parsing.CommandResult> validate)
     System.String get_DefaultName()
    public System.Collections.Generic.IEnumerator<Symbol> GetEnumerator()
  public static class CommandExtensions
    public static System.Int32 Invoke(System.String[] args, IConsole console = null)
    public static System.Int32 Invoke(System.String commandLine, IConsole console = null)
    public static System.Threading.Tasks.Task<System.Int32> InvokeAsync(System.String[] args, IConsole console = null)
    public static System.Threading.Tasks.Task<System.Int32> InvokeAsync(System.String commandLine, IConsole console = null)
    public static System.CommandLine.Parsing.ParseResult Parse(System.String[] args)
    public static System.CommandLine.Parsing.ParseResult Parse(System.String commandLine)
  public class CommandLineConfiguration
    .ctor(Command command, System.Boolean enablePosixBundling = True, System.Boolean enableDirectives = True, System.Boolean enableLegacyDoubleDashBehavior = False, LocalizationResources resources = null, System.CommandLine.Parsing.ResponseFileHandling responseFileHandling = ParseArgsAsLineSeparated, System.Collections.Generic.IReadOnlyList<System.CommandLine.Invocation.InvocationMiddleware> middlewarePipeline = null, System.Func<System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder> helpBuilderFactory = null)
    public System.Boolean EnableDirectives { get; }
    public System.Boolean EnableLegacyDoubleDashBehavior { get; }
    public System.Boolean EnablePosixBundling { get; }
    public LocalizationResources LocalizationResources { get; }
    public ICommand RootCommand { get; }
    public System.CommandLine.Collections.ISymbolSet Symbols { get; }
  public static class CompletionSourceExtensions
    public static System.Void Add(System.Func<System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable<System.String>> complete)
    public static System.Void Add(System.CommandLine.Completions.CompletionDelegate complete)
    public static System.Void Add(System.String[] completions)
  public class CompletionSourceList, System.Collections.Generic.IEnumerable<System.CommandLine.Completions.ICompletionSource>, System.Collections.Generic.IReadOnlyCollection<System.CommandLine.Completions.ICompletionSource>, System.Collections.Generic.IReadOnlyList<System.CommandLine.Completions.ICompletionSource>, System.Collections.IEnumerable
    .ctor()
    public System.Int32 Count { get; }
    public System.CommandLine.Completions.ICompletionSource Item { get; }
    public System.Void Add(System.CommandLine.Completions.ICompletionSource source)
    public System.Void Clear()
    public System.Collections.Generic.IEnumerator<System.CommandLine.Completions.ICompletionSource> GetEnumerator()
  public static class ConsoleExtensions
    public static System.Void Write(System.String value)
    public static System.Void WriteLine(System.String value)
  public abstract class IArgument, System.CommandLine.Binding.IValueDescriptor, System.CommandLine.Completions.ICompletionSource, ISymbol
    public IArgumentArity Arity { get; }
  public abstract class IArgumentArity
    public System.Int32 MaximumNumberOfValues { get; }
    public System.Int32 MinimumNumberOfValues { get; }
  public abstract class ICommand, System.CommandLine.Completions.ICompletionSource, IIdentifierSymbol, ISymbol
    public System.Collections.Generic.IReadOnlyList<IArgument> Arguments { get; }
    public System.Collections.Generic.IReadOnlyList<IOption> Options { get; }
    public System.Boolean TreatUnmatchedTokensAsErrors { get; }
  public abstract class IConsole, System.CommandLine.IO.IStandardError, System.CommandLine.IO.IStandardIn, System.CommandLine.IO.IStandardOut
  public abstract class IdentifierSymbol : Symbol, System.CommandLine.Completions.ICompletionSource, IIdentifierSymbol, ISymbol
    public System.Collections.Generic.IReadOnlyCollection<System.String> Aliases { get; }
    public System.String Name { get; set; }
     System.Void AddAliasInner(System.String alias)
    public System.Boolean HasAlias(System.String alias)
     System.Void RemoveAlias(System.String alias)
  public abstract class IDirectiveCollection, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Collections.Generic.IEnumerable<System.String>>>, System.Collections.IEnumerable
    public System.Boolean Contains(System.String name)
    public System.Boolean TryGetValues(System.String name, ref System.Collections.Generic.IReadOnlyList<System.String> values)
  public abstract class IIdentifierSymbol, System.CommandLine.Completions.ICompletionSource, ISymbol
    public System.Collections.Generic.IReadOnlyCollection<System.String> Aliases { get; }
    public System.Boolean HasAlias(System.String alias)
  public abstract class IOption, System.CommandLine.Binding.IValueDescriptor, System.CommandLine.Completions.ICompletionSource, IIdentifierSymbol, ISymbol
    public System.Boolean AllowMultipleArgumentsPerToken { get; }
    public IArgument Argument { get; }
    public System.Boolean IsRequired { get; }
  public abstract class ISymbol, System.CommandLine.Completions.ICompletionSource
    public System.CommandLine.Collections.ISymbolSet Children { get; }
    public System.String Description { get; }
    public System.Boolean IsHidden { get; }
    public System.String Name { get; }
    public System.CommandLine.Collections.ISymbolSet Parents { get; }
  public class LocalizationResources
    public static LocalizationResources Instance { get; }
    public System.String ArgumentConversionCannotParse(System.String value, System.Type expectedType)
    public System.String ArgumentConversionCannotParseForCommand(System.String value, System.String commandAlias, System.Type expectedType)
    public System.String ArgumentConversionCannotParseForOption(System.String value, System.String optionAlias, System.Type expectedType)
    public System.String DebugDirectiveAttachToProcess(System.Int32 processId, System.String processName)
    public System.String DebugDirectiveExecutableNotSpecified(System.String environmentVariableName, System.String processName)
    public System.String DebugDirectiveProcessNotIncludedInEnvironmentVariable(System.String processName, System.String environmentVariableName, System.String processNames)
    public System.String DirectoryDoesNotExist(System.String path)
    public System.String ErrorReadingResponseFile(System.String filePath, System.IO.IOException e)
    public System.String ExceptionHandlerHeader()
    public System.String ExpectsFewerArguments(System.CommandLine.Parsing.Token token, System.Int32 providedNumberOfValues, System.Int32 maximumNumberOfValues)
    public System.String ExpectsOneArgument(System.CommandLine.Parsing.SymbolResult symbolResult)
    public System.String FileDoesNotExist(System.String filePath)
    public System.String FileOrDirectoryDoesNotExist(System.String path)
    protected System.String GetResourceString(System.String resourceString, System.Object[] formatArguments)
    public System.String HelpAdditionalArgumentsDescription()
    public System.String HelpAdditionalArgumentsTitle()
    public System.String HelpArgumentDefaultValueTitle()
    public System.String HelpArgumentsTitle()
    public System.String HelpCommandsTitle()
    public System.String HelpDescriptionTitle()
    public System.String HelpOptionDescription()
    public System.String HelpOptionsRequired()
    public System.String HelpOptionsTitle()
    public System.String HelpUsageAdditionalArguments()
    public System.String HelpUsageCommandTitle()
    public System.String HelpUsageOptionsTitle()
    public System.String HelpUsageTitle()
    public System.String InvalidCharactersInFileName(System.Char invalidChar)
    public System.String InvalidCharactersInPath(System.Char invalidChar)
    public System.String NoArgumentProvided(System.CommandLine.Parsing.SymbolResult symbolResult)
    public System.String RequiredArgumentMissing(System.CommandLine.Parsing.SymbolResult symbolResult)
    public System.String RequiredCommandWasNotProvided()
    public System.String ResponseFileNotFound(System.String filePath)
    public System.String SuggestionsTokenNotMatched(System.String token)
    public System.String UnrecognizedArgument(System.String unrecognizedArg, System.Collections.Generic.IReadOnlyCollection<System.String> allowedValues)
    public System.String UnrecognizedCommandOrArgument(System.String arg)
    public System.String VersionOptionCannotBeCombinedWithOtherArguments(System.String optionAlias)
    public System.String VersionOptionDescription()
  public class Option : IdentifierSymbol, System.CommandLine.Binding.IValueDescriptor, System.CommandLine.Completions.ICompletionSource, IIdentifierSymbol, IOption, ISymbol
    .ctor(System.String name, System.String description = null, System.Type argumentType = null, System.Func<System.Object> getDefaultValue = null, IArgumentArity arity = null)
    .ctor(System.String[] aliases, System.String description = null, System.Type argumentType = null, System.Func<System.Object> getDefaultValue = null, IArgumentArity arity = null)
    public System.Boolean AllowMultipleArgumentsPerToken { get; set; }
    public System.String ArgumentHelpName { get; set; }
    public IArgumentArity Arity { get; set; }
    public System.Boolean IsRequired { get; set; }
    public System.Type ValueType { get; }
    public System.Void AddAlias(System.String alias)
     System.Void AddAliasInner(System.String alias)
    public System.Void AddValidator(System.CommandLine.Parsing.ValidateSymbolResult<System.CommandLine.Parsing.OptionResult> validate)
     System.String get_DefaultName()
    public System.Boolean HasAliasIgnoringPrefix(System.String alias)
     System.Void RemoveAlias(System.String alias)
    public System.Void SetDefaultValue(System.Object value)
    public System.Void SetDefaultValueFactory(System.Func<System.Object> getDefaultValue)
  public class Option<T> : Option, IValueDescriptor<T>, System.CommandLine.Binding.IValueDescriptor, System.CommandLine.Completions.ICompletionSource, IIdentifierSymbol, IOption, ISymbol
    .ctor(System.String name, System.String description = null)
    .ctor(System.String[] aliases, System.String description = null)
    .ctor(System.String name, ParseArgument<T> parseArgument, System.Boolean isDefault = False, System.String description = null)
    .ctor(System.String[] aliases, ParseArgument<T> parseArgument, System.Boolean isDefault = False, System.String description = null)
    .ctor(System.String name, Func<T> getDefaultValue, System.String description = null)
    .ctor(System.String[] aliases, Func<T> getDefaultValue, System.String description = null)
    public IArgumentArity Arity { get; set; }
  public static class OptionExtensions
    public static TOption AddCompletions<TOption>(System.String[] values)
    public static TOption AddCompletions<TOption>(System.Func<System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable<System.String>> complete)
    public static TOption AddCompletions<TOption>(System.CommandLine.Completions.CompletionDelegate complete)
    public static Option<System.IO.FileInfo> ExistingOnly()
    public static Option<System.IO.DirectoryInfo> ExistingOnly()
    public static Option<System.IO.FileSystemInfo> ExistingOnly()
    public static Option<T> ExistingOnly<T>()
    public static TOption FromAmong<TOption>(System.String[] values)
    public static TOption LegalFileNamesOnly<TOption>()
    public static TOption LegalFilePathsOnly<TOption>()
    public static System.CommandLine.Parsing.ParseResult Parse(System.String commandLine)
    public static System.CommandLine.Parsing.ParseResult Parse(System.String[] args)
  public class RootCommand : Command, System.Collections.Generic.IEnumerable<Symbol>, System.Collections.IEnumerable, System.CommandLine.Completions.ICompletionSource, ICommand, IIdentifierSymbol, ISymbol
    public static System.String ExecutableName { get; }
    public static System.String ExecutablePath { get; }
    .ctor(System.String description = )
     System.Void RemoveAlias(System.String alias)
  public abstract class Symbol, System.CommandLine.Completions.ICompletionSource, ISymbol
    public System.CommandLine.Collections.SymbolSet Children { get; }
    public System.String Description { get; set; }
    public System.Boolean IsHidden { get; set; }
    public System.String Name { get; set; }
    public System.CommandLine.Collections.ISymbolSet Parents { get; }
     System.Void AddArgumentInner(Argument argument)
     System.Void AddSymbol(Symbol symbol)
     System.String get_DefaultName()
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions()
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.CommandLine.Completions.CompletionContext context)
     System.Void ThrowIfAliasIsInvalid(System.String alias)
    public System.String ToString()
System.CommandLine.Binding
  public class BindingContext, System.IServiceProvider
    .ctor(System.CommandLine.Parsing.ParseResult parseResult, System.CommandLine.IConsole console = null)
    public System.CommandLine.IConsole Console { get; }
    public System.CommandLine.Parsing.ParseResult ParseResult { get; set; }
    public System.Void AddService(System.Type serviceType, System.Func<System.IServiceProvider,System.Object> factory)
    public System.Void AddService<T>(Func<System.IServiceProvider,T> factory)
    public System.Object GetService(System.Type serviceType)
  public class BoundValue
    public static BoundValue DefaultForValueDescriptor(IValueDescriptor valueDescriptor)
    public System.Object Value { get; }
    public IValueDescriptor ValueDescriptor { get; }
    public IValueSource ValueSource { get; }
    public System.String ToString()
  public abstract class IValueDescriptor
    public System.Boolean HasDefaultValue { get; }
    public System.String ValueName { get; }
    public System.Type ValueType { get; }
    public System.Object GetDefaultValue()
  public abstract class IValueDescriptor<T>, IValueDescriptor
  public abstract class IValueSource
    public System.Boolean TryGetValue(IValueDescriptor valueDescriptor, BindingContext bindingContext, ref System.Object& boundValue)
System.CommandLine.Builder
  public class CommandLineBuilder
    .ctor(System.CommandLine.Command rootCommand = null)
    public System.CommandLine.Command Command { get; }
    public System.Boolean EnableDirectives { get; set; }
    public System.Boolean EnableLegacyDoubleDashBehavior { get; set; }
    public System.Boolean EnablePosixBundling { get; set; }
    public System.CommandLine.Parsing.ResponseFileHandling ResponseFileHandling { get; set; }
    public System.CommandLine.Parsing.Parser Build()
  public static class CommandLineBuilderExtensions
    public static CommandLineBuilder AddMiddleware(System.CommandLine.Invocation.InvocationMiddleware middleware, System.CommandLine.Invocation.MiddlewareOrder order = Default)
    public static CommandLineBuilder AddMiddleware(System.Action<System.CommandLine.Invocation.InvocationContext> onInvoke, System.CommandLine.Invocation.MiddlewareOrder order = Default)
    public static CommandLineBuilder CancelOnProcessTermination()
    public static CommandLineBuilder ConfigureConsole(System.Func<System.CommandLine.Binding.BindingContext,System.CommandLine.IConsole> createConsole)
    public static CommandLineBuilder EnableDirectives(System.Boolean value = True)
    public static CommandLineBuilder EnableLegacyDoubleDashBehavior(System.Boolean value = True)
    public static CommandLineBuilder EnablePosixBundling(System.Boolean value = True)
    public static CommandLineBuilder ParseResponseFileAs(System.CommandLine.Parsing.ResponseFileHandling responseFileHandling)
    public static CommandLineBuilder RegisterWithDotnetSuggest()
    public static CommandLineBuilder UseDebugDirective()
    public static CommandLineBuilder UseDefaults()
    public static CommandLineBuilder UseEnvironmentVariableDirective()
    public static CommandLineBuilder UseExceptionHandler(System.Action<System.Exception,System.CommandLine.Invocation.InvocationContext> onException = null, System.Nullable<System.Int32> errorExitCode = null)
    public static CommandLineBuilder UseHelp()
    public static CommandLineBuilder UseHelp(System.String[] helpAliases)
    public static CommandLineBuilder UseHelp(System.Func<System.CommandLine.Help.HelpContext,System.Collections.Generic.IEnumerable<System.CommandLine.Help.HelpDelegate>> layout)
    public static TBuilder UseHelpBuilder<TBuilder>(System.Func<System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder> getHelpBuilder)
    public static CommandLineBuilder UseLocalizationResources(System.CommandLine.LocalizationResources validationMessages)
    public static CommandLineBuilder UseMiddleware(System.CommandLine.Invocation.InvocationMiddleware middleware, System.CommandLine.Invocation.MiddlewareOrder order = Default)
    public static CommandLineBuilder UseMiddleware(System.Action<System.CommandLine.Invocation.InvocationContext> onInvoke, System.CommandLine.Invocation.MiddlewareOrder order = Default)
    public static CommandLineBuilder UseParseDirective(System.Nullable<System.Int32> errorExitCode = null)
    public static CommandLineBuilder UseParseErrorReporting(System.Nullable<System.Int32> errorExitCode = null)
    public static CommandLineBuilder UseSuggestDirective()
    public static CommandLineBuilder UseTypoCorrections(System.Int32 maxLevenshteinDistance = 3)
    public static CommandLineBuilder UseVersionOption()
    public static CommandLineBuilder UseVersionOption(System.String[] aliases)
System.CommandLine.Collections
  public abstract class AliasedSet<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, System.Collections.IEnumerable
    public System.Int32 Count { get; }
    public T Item { get; }
    public System.Boolean ContainsAlias(System.String alias)
     System.Void EnsureAliasIndexIsCurrent()
     List<T> get_Items()
    protected System.Collections.Generic.IReadOnlyCollection<System.String> GetAliases(T item)
    public T GetByAlias(System.String alias)
    public IEnumerator<T> GetEnumerator()
     System.Void MarkAsDirty(T item)
  public abstract class ISymbolSet, System.Collections.Generic.IEnumerable<System.CommandLine.ISymbol>, System.Collections.Generic.IReadOnlyCollection<System.CommandLine.ISymbol>, System.Collections.Generic.IReadOnlyList<System.CommandLine.ISymbol>, System.Collections.IEnumerable
    public System.CommandLine.ISymbol GetByAlias(System.String alias)
  public class SymbolSet : AliasedSet<System.CommandLine.ISymbol>, System.Collections.Generic.IEnumerable<System.CommandLine.ISymbol>, System.Collections.Generic.IReadOnlyCollection<System.CommandLine.ISymbol>, System.Collections.Generic.IReadOnlyList<System.CommandLine.ISymbol>, System.Collections.IEnumerable, ISymbolSet
    .ctor()
    protected System.Collections.Generic.IReadOnlyCollection<System.String> GetAliases(System.CommandLine.ISymbol item)
System.CommandLine.Completions
  public abstract class CompletionContext
    public System.CommandLine.Parsing.ParseResult ParseResult { get; }
    public System.String WordToComplete { get; }
  public delegate CompletionDelegate : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(CompletionContext context, System.AsyncCallback callback, System.Object object)
    public System.Collections.Generic.IEnumerable<CompletionItem> EndInvoke(System.IAsyncResult result)
    public System.Collections.Generic.IEnumerable<CompletionItem> Invoke(CompletionContext context)
  public class CompletionItem
    .ctor(System.String label, System.String kind = Value, System.String sortText = null, System.String insertText = null, System.String documentation = null, System.String detail = null)
    public System.String Detail { get; }
    public System.String Documentation { get; set; }
    public System.String InsertText { get; }
    public System.String Kind { get; }
    public System.String Label { get; }
    public System.String SortText { get; }
    protected System.Boolean Equals(CompletionItem other)
    public System.Boolean Equals(System.Object obj)
    public System.Int32 GetHashCode()
    public System.String ToString()
  public abstract class ICompletionSource
    public System.Collections.Generic.IEnumerable<CompletionItem> GetCompletions(CompletionContext context)
  public class TextCompletionContext : CompletionContext
    public System.String CommandLineText { get; }
    public System.Int32 CursorPosition { get; }
    public TextCompletionContext AtCursorPosition(System.Int32 position)
  public class TokenCompletionContext : CompletionContext
System.CommandLine.Help
  public class HelpBuilder
    public static HelpDelegate AdditionalArgumentsSection()
    public static HelpDelegate CommandArgumentsSection()
    public static HelpDelegate CommandUsageSection()
    public static System.Collections.Generic.IEnumerable<HelpDelegate> DefaultLayout()
    public static HelpDelegate OptionsSection()
    public static HelpDelegate SubcommandsSection()
    public static HelpDelegate SynopsisSection()
    .ctor(System.CommandLine.LocalizationResources localizationResources, System.Int32 maxWidth = 2147483647, System.Func<HelpContext,System.Collections.Generic.IEnumerable<HelpDelegate>> getLayout = null)
    public System.CommandLine.LocalizationResources LocalizationResources { get; }
    public System.Int32 MaxWidth { get; }
    public System.Void Customize(System.CommandLine.ISymbol symbol, System.Func<HelpContext,System.String> firstColumnText = null, System.Func<HelpContext,System.String> secondColumnText = null, System.Func<HelpContext,System.String> defaultValue = null)
    public System.Collections.Generic.IEnumerable<HelpDelegate> GetLayout(HelpContext context)
    public TwoColumnHelpRow GetTwoColumnRow(System.CommandLine.IIdentifierSymbol symbol, HelpContext context)
    public System.Void Write(HelpContext context)
    public System.Void WriteColumns(System.Collections.Generic.IReadOnlyList<TwoColumnHelpRow> items, HelpContext context)
  public static class HelpBuilderExtensions
    public static System.Void Customize(System.CommandLine.ISymbol symbol, System.String firstColumnText = null, System.String secondColumnText = null, System.String defaultValue = null)
    public static System.Void Write(System.CommandLine.ICommand command, System.IO.TextWriter writer)
  public class HelpContext
    .ctor(HelpBuilder helpBuilder, System.CommandLine.ICommand command, System.IO.TextWriter output, System.CommandLine.Parsing.ParseResult parseResult = null, System.Nullable<System.Int32> maxWidth = 2147483647)
    public System.CommandLine.ICommand Command { get; }
    public HelpBuilder HelpBuilder { get; }
    public System.Int32 MaxWidth { get; }
    public System.IO.TextWriter Output { get; }
    public System.CommandLine.Parsing.ParseResult ParseResult { get; }
  public delegate HelpDelegate : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(HelpContext context, System.AsyncCallback callback, System.Object object)
    public System.Void EndInvoke(System.IAsyncResult result)
    public System.Void Invoke(HelpContext context)
  public class TwoColumnHelpRow, System.IEquatable<TwoColumnHelpRow>
    .ctor(System.String firstColumnText, System.String secondColumnText)
    public System.String FirstColumnText { get; }
    public System.String SecondColumnText { get; }
    public System.Boolean Equals(System.Object obj)
    public System.Boolean Equals(TwoColumnHelpRow other)
    public System.Int32 GetHashCode()
System.CommandLine.Invocation
  public static class CommandHandler
    public static ICommandHandler Create(System.Action handle)
    public static ICommandHandler Create<T>(IValueDescriptor<T> symbol1, Action<T> handle)
    public static ICommandHandler Create<T1, T2>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, Action<T1,T2> handle)
    public static ICommandHandler Create<T1, T2, T3>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, Action<T1,T2,T3> handle)
    public static ICommandHandler Create<T1, T2, T3, T4>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, Action<T1,T2,T3,T4> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, Action<T1,T2,T3,T4,T5> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, Action<T1,T2,T3,T4,T5,T6> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, Action<T1,T2,T3,T4,T5,T6,T7> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, Action<T1,T2,T3,T4,T5,T6,T7,T8> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, IValueDescriptor<T11> symbol11, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, IValueDescriptor<T11> symbol11, IValueDescriptor<T12> symbol12, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, IValueDescriptor<T11> symbol11, IValueDescriptor<T12> symbol12, IValueDescriptor<T13> symbol13, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, IValueDescriptor<T11> symbol11, IValueDescriptor<T12> symbol12, IValueDescriptor<T13> symbol13, IValueDescriptor<T14> symbol14, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, IValueDescriptor<T11> symbol11, IValueDescriptor<T12> symbol12, IValueDescriptor<T13> symbol13, IValueDescriptor<T14> symbol14, IValueDescriptor<T15> symbol15, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, IValueDescriptor<T11> symbol11, IValueDescriptor<T12> symbol12, IValueDescriptor<T13> symbol13, IValueDescriptor<T14> symbol14, IValueDescriptor<T15> symbol15, IValueDescriptor<T16> symbol16, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> handle)
    public static ICommandHandler Create(System.Func<System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create(System.Func<InvocationContext,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T>(IValueDescriptor<T> symbol1, Func<T,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, Func<T1,T2,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, Func<T1,T2,T3,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, Func<T1,T2,T3,T4,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, Func<T1,T2,T3,T4,T5,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, Func<T1,T2,T3,T4,T5,T6,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, Func<T1,T2,T3,T4,T5,T6,T7,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, Func<T1,T2,T3,T4,T5,T6,T7,T8,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, IValueDescriptor<T11> symbol11, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, IValueDescriptor<T11> symbol11, IValueDescriptor<T12> symbol12, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, IValueDescriptor<T11> symbol11, IValueDescriptor<T12> symbol12, IValueDescriptor<T13> symbol13, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, IValueDescriptor<T11> symbol11, IValueDescriptor<T12> symbol12, IValueDescriptor<T13> symbol13, IValueDescriptor<T14> symbol14, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, IValueDescriptor<T11> symbol11, IValueDescriptor<T12> symbol12, IValueDescriptor<T13> symbol13, IValueDescriptor<T14> symbol14, IValueDescriptor<T15> symbol15, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,System.Threading.Tasks.Task> handle)
    public static ICommandHandler Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8, IValueDescriptor<T9> symbol9, IValueDescriptor<T10> symbol10, IValueDescriptor<T11> symbol11, IValueDescriptor<T12> symbol12, IValueDescriptor<T13> symbol13, IValueDescriptor<T14> symbol14, IValueDescriptor<T15> symbol15, IValueDescriptor<T16> symbol16, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,System.Threading.Tasks.Task> handle)
  public abstract class ICommandHandler
    public System.Threading.Tasks.Task<System.Int32> InvokeAsync(InvocationContext context)
  public abstract class IInvocationResult
    public System.Void Apply(InvocationContext context)
  public class InvocationContext, System.IDisposable
    .ctor(System.CommandLine.Parsing.ParseResult parseResult, System.CommandLine.IConsole console = null)
    public System.CommandLine.Binding.BindingContext BindingContext { get; }
    public System.CommandLine.IConsole Console { get; }
    public System.Int32 ExitCode { get; set; }
    public System.CommandLine.Help.HelpBuilder HelpBuilder { get; }
    public IInvocationResult InvocationResult { get; set; }
    public System.CommandLine.LocalizationResources LocalizationResources { get; }
    public System.CommandLine.Parsing.Parser Parser { get; }
    public System.CommandLine.Parsing.ParseResult ParseResult { get; set; }
    public System.Void Dispose()
    public System.Threading.CancellationToken GetCancellationToken()
  public delegate InvocationMiddleware : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(InvocationContext context, System.Func<InvocationContext,System.Threading.Tasks.Task> next, System.AsyncCallback callback, System.Object object)
    public System.Threading.Tasks.Task EndInvoke(System.IAsyncResult result)
    public System.Threading.Tasks.Task Invoke(InvocationContext context, System.Func<InvocationContext,System.Threading.Tasks.Task> next)
  public enum MiddlewareOrder : System.Enum, System.IComparable, System.IConvertible, System.IFormattable
    Default=0
    ErrorReporting=1000
    ExceptionHandler=-2000
    Configuration=-1000
System.CommandLine.IO
  public abstract class IStandardError
    public IStandardStreamWriter Error { get; }
    public System.Boolean IsErrorRedirected { get; }
  public abstract class IStandardIn
    public System.Boolean IsInputRedirected { get; }
  public abstract class IStandardOut
    public System.Boolean IsOutputRedirected { get; }
    public IStandardStreamWriter Out { get; }
  public abstract class IStandardStreamWriter
    public System.Void Write(System.String value)
  public static class StandardStreamWriter
    public static IStandardStreamWriter Create(System.IO.TextWriter writer)
    public static System.IO.TextWriter CreateTextWriter()
    public static System.Void WriteLine()
    public static System.Void WriteLine(System.String value)
  public class SystemConsole, System.CommandLine.IConsole, IStandardError, IStandardIn, IStandardOut
    .ctor()
    public IStandardStreamWriter Error { get; }
    public System.Boolean IsErrorRedirected { get; }
    public System.Boolean IsInputRedirected { get; }
    public System.Boolean IsOutputRedirected { get; }
    public IStandardStreamWriter Out { get; }
  public class TestConsole, System.CommandLine.IConsole, IStandardError, IStandardIn, IStandardOut
    .ctor()
    public IStandardStreamWriter Error { get; }
    public System.Boolean IsErrorRedirected { get; }
    public System.Boolean IsInputRedirected { get; }
    public System.Boolean IsOutputRedirected { get; }
    public IStandardStreamWriter Out { get; }
    protected System.Void set_Error(IStandardStreamWriter value)
    protected System.Void set_IsErrorRedirected(System.Boolean value)
    protected System.Void set_IsInputRedirected(System.Boolean value)
    protected System.Void set_IsOutputRedirected(System.Boolean value)
    protected System.Void set_Out(IStandardStreamWriter value)
System.CommandLine.Parsing
  public class ArgumentResult : SymbolResult
    public System.CommandLine.IArgument Argument { get; }
    public System.Object GetValueOrDefault()
    public T GetValueOrDefault<T>()
    public System.Void OnlyTake(System.Int32 numberOfTokens)
    public System.String ToString()
  public class CommandLineStringSplitter
    public System.Collections.Generic.IEnumerable<System.String> Split(System.String commandLine)
  public class CommandResult : SymbolResult
    public System.CommandLine.ICommand Command { get; }
    public Token Token { get; }
  public class OptionResult : SymbolResult
    public System.Boolean IsImplicit { get; }
    public System.CommandLine.IOption Option { get; }
    public Token Token { get; }
     System.Int32 get_RemainingArgumentCapacity()
    public System.Object GetValueOrDefault()
    public T GetValueOrDefault<T>()
  public delegate ParseArgument<T> : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(ArgumentResult result, System.AsyncCallback callback, System.Object object)
    public T EndInvoke(System.IAsyncResult result)
    public T Invoke(ArgumentResult result)
  public class ParseError
    public System.String Message { get; }
    public SymbolResult SymbolResult { get; }
    public System.String ToString()
  public class Parser
    .ctor(System.CommandLine.CommandLineConfiguration configuration)
    .ctor(System.CommandLine.Command command)
    .ctor()
    public System.CommandLine.CommandLineConfiguration Configuration { get; }
    public ParseResult Parse(System.Collections.Generic.IReadOnlyList<System.String> arguments, System.String rawInput = null)
  public class ParseResult
    public CommandResult CommandResult { get; }
    public System.CommandLine.IDirectiveCollection Directives { get; }
    public System.Collections.Generic.IReadOnlyList<ParseError> Errors { get; }
    public Parser Parser { get; }
    public CommandResult RootCommandResult { get; }
    public System.Collections.Generic.IReadOnlyList<Token> Tokens { get; }
    public System.Collections.Generic.IReadOnlyList<System.String> UnmatchedTokens { get; }
    public System.Collections.Generic.IReadOnlyList<System.String> UnparsedTokens { get; }
    public ArgumentResult FindResultFor(System.CommandLine.IArgument argument)
    public CommandResult FindResultFor(System.CommandLine.ICommand command)
    public OptionResult FindResultFor(System.CommandLine.IOption option)
    public SymbolResult FindResultFor(System.CommandLine.ISymbol symbol)
    public System.CommandLine.Completions.CompletionContext GetCompletionContext()
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.Nullable<System.Int32> position = null)
    public System.Object GetValueForArgument(System.CommandLine.IArgument argument)
    public T GetValueForArgument<T>(Argument<T> argument)
    public T GetValueForArgument<T>(System.CommandLine.IArgument argument)
    public System.Object GetValueForOption(System.CommandLine.Option option)
    public T GetValueForOption<T>(Option<T> option)
    public T GetValueForOption<T>(System.CommandLine.IOption option)
    public System.String ToString()
    public System.Object ValueForArgument(System.String alias)
    public System.Object ValueForArgument(System.CommandLine.Argument argument)
    public T ValueForArgument<T>(Argument<T> argument)
    public T ValueForArgument<T>(System.String name)
    public System.Object ValueForOption(System.String alias)
    public System.Object ValueForOption(System.CommandLine.Option option)
    public T ValueForOption<T>(Option<T> option)
    public T ValueForOption<T>(System.String alias)
  public static class ParseResultExtensions
    public static System.String Diagram()
    public static System.Boolean HasOption(System.CommandLine.IOption option)
    public static System.Boolean HasOption(System.String alias)
    public static System.Int32 Invoke(System.CommandLine.IConsole console = null)
    public static System.Threading.Tasks.Task<System.Int32> InvokeAsync(System.CommandLine.IConsole console = null)
  public static class ParserExtensions
    public static System.Int32 Invoke(System.String commandLine, System.CommandLine.IConsole console = null)
    public static System.Int32 Invoke(System.String[] args, System.CommandLine.IConsole console = null)
    public static System.Threading.Tasks.Task<System.Int32> InvokeAsync(System.String commandLine, System.CommandLine.IConsole console = null)
    public static System.Threading.Tasks.Task<System.Int32> InvokeAsync(System.String[] args, System.CommandLine.IConsole console = null)
    public static ParseResult Parse(System.String commandLine)
  public enum ResponseFileHandling : System.Enum, System.IComparable, System.IConvertible, System.IFormattable
    ParseArgsAsLineSeparated=0
    ParseArgsAsSpaceSeparated=1
    Disabled=2
  public abstract class SymbolResult
    public SymbolResultSet Children { get; }
    public System.String ErrorMessage { get; set; }
    public System.CommandLine.LocalizationResources LocalizationResources { get; set; }
    public SymbolResult Parent { get; }
    public System.CommandLine.ISymbol Symbol { get; }
    public System.Collections.Generic.IReadOnlyList<Token> Tokens { get; }
    public ArgumentResult FindResultFor(System.CommandLine.IArgument argument)
    public CommandResult FindResultFor(System.CommandLine.ICommand command)
    public OptionResult FindResultFor(System.CommandLine.IOption option)
     System.Int32 get_RemainingArgumentCapacity()
    public System.String ToString()
  public class SymbolResultSet : System.CommandLine.Collections.AliasedSet<SymbolResult>, System.Collections.Generic.IEnumerable<SymbolResult>, System.Collections.Generic.IReadOnlyCollection<SymbolResult>, System.Collections.Generic.IReadOnlyList<SymbolResult>, System.Collections.IEnumerable
    .ctor()
    protected System.Collections.Generic.IReadOnlyCollection<System.String> GetAliases(SymbolResult result)
  public class Token
    public static System.Boolean op_Equality(Token left, Token right)
    public static System.Boolean op_Inequality(Token left, Token right)
    .ctor(System.String value, TokenType type)
    public TokenType Type { get; }
    public System.String Value { get; }
    public System.Boolean Equals(System.Object obj)
    public System.Int32 GetHashCode()
    public System.String ToString()
  public class TokenizeError
    public System.String Message { get; }
    public System.String ToString()
  public enum TokenType : System.Enum, System.IComparable, System.IConvertible, System.IFormattable
    Argument=0
    Command=1
    Option=2
    DoubleDash=3
    Unparsed=4
    Directive=5
  public delegate ValidateSymbolResult<T> : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(T symbolResult, System.AsyncCallback callback, System.Object object)
    public System.String EndInvoke(System.IAsyncResult result)
    public System.String Invoke(T symbolResult)
