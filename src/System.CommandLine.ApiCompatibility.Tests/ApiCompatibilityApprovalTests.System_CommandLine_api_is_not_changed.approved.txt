System.CommandLine
  public abstract class Argument : Symbol, System.CommandLine.Binding.IValueDescriptor
    public ArgumentArity Arity { get; set; }
    public System.Collections.Generic.List<System.Func<System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem>>> CompletionSources { get; }
    public System.Boolean HasDefaultValue { get; }
    public System.String HelpName { get; set; }
    public System.Collections.Generic.List<System.Action<System.CommandLine.Parsing.ArgumentResult>> Validators { get; }
    public System.Type ValueType { get; }
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.CommandLine.Completions.CompletionContext context)
    public System.Object GetDefaultValue()
    public System.String ToString()
  public class Argument<T> : Argument, IValueDescriptor<T>, System.CommandLine.Binding.IValueDescriptor
    .ctor(System.String name)
    public Func<System.CommandLine.Parsing.ArgumentResult,T> CustomParser { get; set; }
    public Func<System.CommandLine.Parsing.ArgumentResult,T> DefaultValueFactory { get; set; }
    public System.Boolean HasDefaultValue { get; }
    public System.Type ValueType { get; }
    public System.Void AcceptLegalFileNamesOnly()
    public System.Void AcceptLegalFilePathsOnly()
    public System.Void AcceptOnlyFromAmong(System.String[] values)
  public struct ArgumentArity : System.ValueType, System.IEquatable<ArgumentArity>
    public static ArgumentArity ExactlyOne { get; }
    public static ArgumentArity OneOrMore { get; }
    public static ArgumentArity Zero { get; }
    public static ArgumentArity ZeroOrMore { get; }
    public static ArgumentArity ZeroOrOne { get; }
    .ctor(System.Int32 minimumNumberOfValues, System.Int32 maximumNumberOfValues)
    public System.Int32 MaximumNumberOfValues { get; }
    public System.Int32 MinimumNumberOfValues { get; }
    public System.Boolean Equals(ArgumentArity other)
    public System.Boolean Equals(System.Object obj)
    public System.Int32 GetHashCode()
  public static class ArgumentValidation
    public static Argument<System.IO.FileInfo> AcceptExistingOnly(this Argument<System.IO.FileInfo> argument)
    public static Argument<System.IO.DirectoryInfo> AcceptExistingOnly(this Argument<System.IO.DirectoryInfo> argument)
    public static Argument<System.IO.FileSystemInfo> AcceptExistingOnly(this Argument<System.IO.FileSystemInfo> argument)
    public static Argument<T> AcceptExistingOnly<T>(this Argument<T> argument)
  public class Command : Symbol, System.Collections.Generic.IEnumerable<Symbol>, System.Collections.IEnumerable
    .ctor(System.String name, System.String description = null)
    public System.Collections.Generic.ICollection<System.String> Aliases { get; }
    public System.Collections.Generic.IList<Argument> Arguments { get; }
    public System.Collections.Generic.IEnumerable<Symbol> Children { get; }
    public ICommandHandler Handler { get; set; }
    public System.Collections.Generic.IList<Option> Options { get; }
    public System.Collections.Generic.IList<Command> Subcommands { get; }
    public System.Boolean TreatUnmatchedTokensAsErrors { get; set; }
    public System.Collections.Generic.List<System.Action<System.CommandLine.Parsing.CommandResult>> Validators { get; }
    public System.Void Add(Symbol symbol)
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.CommandLine.Completions.CompletionContext context)
    public System.Collections.Generic.IEnumerator<Symbol> GetEnumerator()
    public ParseResult Parse(System.Collections.Generic.IReadOnlyList<System.String> args, CommandLineConfiguration configuration = null)
    public ParseResult Parse(System.String commandLine, CommandLineConfiguration configuration = null)
  public static class CommandExtensions
    public static System.Int32 Invoke(this Command command, System.String[] args, IConsole console = null)
    public static System.Int32 Invoke(this Command command, System.String commandLine, IConsole console = null)
    public static System.Threading.Tasks.Task<System.Int32> InvokeAsync(this Command command, System.String[] args, IConsole console = null, System.Threading.CancellationToken cancellationToken = null)
    public static System.Threading.Tasks.Task<System.Int32> InvokeAsync(this Command command, System.String commandLine, IConsole console = null, System.Threading.CancellationToken cancellationToken = null)
  public class CommandLineBuilder
    .ctor(Command rootCommand)
    public Command Command { get; }
    public System.Collections.Generic.List<Directive> Directives { get; }
    public CommandLineBuilder AddMiddleware(System.CommandLine.Invocation.InvocationMiddleware middleware, System.CommandLine.Invocation.MiddlewareOrder order = Default)
    public CommandLineBuilder AddMiddleware(System.Action<System.CommandLine.Invocation.InvocationContext> onInvoke, System.CommandLine.Invocation.MiddlewareOrder order = Default)
    public CommandLineConfiguration Build()
    public CommandLineBuilder CancelOnProcessTermination(System.Nullable<System.TimeSpan> timeout = null)
    public CommandLineBuilder EnablePosixBundling(System.Boolean value = True)
    public CommandLineBuilder RegisterWithDotnetSuggest()
    public CommandLineBuilder UseDefaults()
    public CommandLineBuilder UseEnvironmentVariableDirective()
    public CommandLineBuilder UseExceptionHandler(System.Action<System.Exception,System.CommandLine.Invocation.InvocationContext> onException = null, System.Nullable<System.Int32> errorExitCode = null)
    public CommandLineBuilder UseHelp(System.Nullable<System.Int32> maxWidth = null)
    public CommandLineBuilder UseHelp(System.String name, System.String[] helpAliases)
    public CommandLineBuilder UseHelp(System.Action<System.CommandLine.Help.HelpContext> customize, System.Nullable<System.Int32> maxWidth = null)
    public CommandLineBuilder UseHelpBuilder(System.Func<System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder> getHelpBuilder)
    public CommandLineBuilder UseParseDirective(System.Int32 errorExitCode = 1)
    public CommandLineBuilder UseParseErrorReporting(System.Int32 errorExitCode = 1)
    public CommandLineBuilder UseSuggestDirective()
    public CommandLineBuilder UseTokenReplacer(System.CommandLine.Parsing.TryReplaceToken replaceToken)
    public CommandLineBuilder UseTypoCorrections(System.Int32 maxLevenshteinDistance = 3)
    public CommandLineBuilder UseVersionOption()
    public CommandLineBuilder UseVersionOption(System.String name, System.String[] aliases)
  public class CommandLineConfiguration
    public static CommandLineBuilder CreateBuilder(Command rootCommand)
    .ctor(Command command, System.Boolean enablePosixBundling = True, System.Boolean enableTokenReplacement = True, System.Collections.Generic.IReadOnlyList<System.CommandLine.Invocation.InvocationMiddleware> middlewarePipeline = null, System.Func<System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder> helpBuilderFactory = null, System.CommandLine.Parsing.TryReplaceToken tokenReplacer = null)
    public System.Collections.Generic.IReadOnlyList<Directive> Directives { get; }
    public System.Boolean EnablePosixBundling { get; }
    public System.Boolean EnableTokenReplacement { get; }
    public Command RootCommand { get; }
    public System.Int32 Invoke(System.String commandLine, IConsole console = null)
    public System.Int32 Invoke(System.String[] args, IConsole console = null)
    public System.Threading.Tasks.Task<System.Int32> InvokeAsync(System.String commandLine, IConsole console = null, System.Threading.CancellationToken cancellationToken = null)
    public System.Threading.Tasks.Task<System.Int32> InvokeAsync(System.String[] args, IConsole console = null, System.Threading.CancellationToken cancellationToken = null)
    public System.Void ThrowIfInvalid()
  public class CommandLineConfigurationException : System.Exception, System.Runtime.Serialization.ISerializable
    .ctor(System.String message)
    .ctor()
    .ctor(System.String message, System.Exception innerException)
  public static class CompletionSourceExtensions
    public static System.Void Add(this System.Collections.Generic.List<System.Func<System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem>>> completionSources, System.Func<System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable<System.String>> completionsDelegate)
    public static System.Void Add(this System.Collections.Generic.List<System.Func<System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem>>> completionSources, System.String[] completions)
  public static class ConsoleExtensions
    public static System.Void Write(this IConsole console, System.String value)
    public static System.Void WriteLine(this IConsole console, System.String value)
  public class Directive : Symbol
    .ctor(System.String name, System.Action<System.CommandLine.Invocation.InvocationContext> syncHandler = null, System.Func<System.CommandLine.Invocation.InvocationContext,System.Threading.CancellationToken,System.Threading.Tasks.Task> asyncHandler = null)
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.CommandLine.Completions.CompletionContext context)
    public System.Void SetAsynchronousHandler(System.Func<System.CommandLine.Invocation.InvocationContext,System.Threading.CancellationToken,System.Threading.Tasks.Task> handler)
    public System.Void SetSynchronousHandler(System.Action<System.CommandLine.Invocation.InvocationContext> handler)
  public class EnvironmentVariablesDirective : Directive
    .ctor()
  public static class Handler
    public static System.Void SetHandler(this Command command, System.Action<System.CommandLine.Invocation.InvocationContext> handle)
    public static System.Void SetHandler(this Command command, System.Action handle)
    public static System.Void SetHandler(this Command command, System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task> handle)
    public static System.Void SetHandler(this Command command, System.Func<System.CommandLine.Invocation.InvocationContext,System.Threading.CancellationToken,System.Threading.Tasks.Task> handle)
    public static System.Void SetHandler<T>(this Command command, Action<T> handle, IValueDescriptor<T> symbol)
    public static System.Void SetHandler<T>(this Command command, Func<T,System.Threading.CancellationToken,System.Threading.Tasks.Task> handle, IValueDescriptor<T> symbol)
    public static System.Void SetHandler<T1, T2>(this Command command, Action<T1,T2> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2)
    public static System.Void SetHandler<T1, T2>(this Command command, Func<T1,T2,System.Threading.CancellationToken,System.Threading.Tasks.Task> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2)
    public static System.Void SetHandler<T1, T2, T3>(this Command command, Action<T1,T2,T3> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3)
    public static System.Void SetHandler<T1, T2, T3>(this Command command, Func<T1,T2,T3,System.Threading.CancellationToken,System.Threading.Tasks.Task> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3)
    public static System.Void SetHandler<T1, T2, T3, T4>(this Command command, Action<T1,T2,T3,T4> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4)
    public static System.Void SetHandler<T1, T2, T3, T4>(this Command command, Func<T1,T2,T3,T4,System.Threading.CancellationToken,System.Threading.Tasks.Task> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4)
    public static System.Void SetHandler<T1, T2, T3, T4, T5>(this Command command, Action<T1,T2,T3,T4,T5> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5)
    public static System.Void SetHandler<T1, T2, T3, T4, T5>(this Command command, Func<T1,T2,T3,T4,T5,System.Threading.CancellationToken,System.Threading.Tasks.Task> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6>(this Command command, Action<T1,T2,T3,T4,T5,T6> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6>(this Command command, Func<T1,T2,T3,T4,T5,T6,System.Threading.CancellationToken,System.Threading.Tasks.Task> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7>(this Command command, Action<T1,T2,T3,T4,T5,T6,T7> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7>(this Command command, Func<T1,T2,T3,T4,T5,T6,T7,System.Threading.CancellationToken,System.Threading.Tasks.Task> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8>(this Command command, Action<T1,T2,T3,T4,T5,T6,T7,T8> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8>(this Command command, Func<T1,T2,T3,T4,T5,T6,T7,T8,System.Threading.CancellationToken,System.Threading.Tasks.Task> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8)
  public interface ICommandHandler
    public System.Int32 Invoke(System.CommandLine.Invocation.InvocationContext context)
    public System.Threading.Tasks.Task<System.Int32> InvokeAsync(System.CommandLine.Invocation.InvocationContext context, System.Threading.CancellationToken cancellationToken = null)
  public interface IConsole : System.CommandLine.IO.IStandardError, System.CommandLine.IO.IStandardIn, System.CommandLine.IO.IStandardOut
  public abstract class Option : Symbol, System.CommandLine.Binding.IValueDescriptor
    public System.Collections.Generic.ICollection<System.String> Aliases { get; }
    public System.Boolean AllowMultipleArgumentsPerToken { get; set; }
    public System.Boolean AppliesToSelfAndChildren { get; set; }
    public ArgumentArity Arity { get; set; }
    public System.Collections.Generic.List<System.Func<System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem>>> CompletionSources { get; }
    public System.String HelpName { get; set; }
    public System.Boolean IsRequired { get; set; }
    public System.Collections.Generic.List<System.Action<System.CommandLine.Parsing.OptionResult>> Validators { get; }
    public System.Type ValueType { get; }
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.CommandLine.Completions.CompletionContext context)
  public class Option<T> : Option, IValueDescriptor<T>, System.CommandLine.Binding.IValueDescriptor
    .ctor(System.String name, System.String[] aliases)
    public Func<System.CommandLine.Parsing.ArgumentResult,T> CustomParser { get; set; }
    public Func<System.CommandLine.Parsing.ArgumentResult,T> DefaultValueFactory { get; set; }
    public System.Void AcceptLegalFileNamesOnly()
    public System.Void AcceptLegalFilePathsOnly()
    public System.Void AcceptOnlyFromAmong(System.String[] values)
  public static class OptionValidation
    public static Option<System.IO.FileInfo> AcceptExistingOnly(this Option<System.IO.FileInfo> option)
    public static Option<System.IO.DirectoryInfo> AcceptExistingOnly(this Option<System.IO.DirectoryInfo> option)
    public static Option<System.IO.FileSystemInfo> AcceptExistingOnly(this Option<System.IO.FileSystemInfo> option)
    public static Option<T> AcceptExistingOnly<T>(this Option<T> option)
  public class ParseDirective : Directive
    .ctor(System.Int32 errorExitCode = 1)
  public class ParseResult
    public System.CommandLine.Parsing.CommandResult CommandResult { get; }
    public CommandLineConfiguration Configuration { get; }
    public System.Collections.Generic.IReadOnlyList<System.CommandLine.Parsing.ParseError> Errors { get; }
    public System.CommandLine.Parsing.CommandResult RootCommandResult { get; }
    public System.Collections.Generic.IReadOnlyList<System.CommandLine.Parsing.Token> Tokens { get; }
    public System.Collections.Generic.IReadOnlyList<System.String> UnmatchedTokens { get; }
    public System.CommandLine.Parsing.ArgumentResult FindResultFor(Argument argument)
    public System.CommandLine.Parsing.CommandResult FindResultFor(Command command)
    public System.CommandLine.Parsing.OptionResult FindResultFor(Option option)
    public System.CommandLine.Parsing.DirectiveResult FindResultFor(Directive directive)
    public System.CommandLine.Parsing.SymbolResult FindResultFor(Symbol symbol)
    public System.CommandLine.Completions.CompletionContext GetCompletionContext()
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.Nullable<System.Int32> position = null)
    public T GetValue<T>(Argument<T> argument)
    public T GetValue<T>(Option<T> option)
    public System.Int32 Invoke(IConsole console = null)
    public System.Threading.Tasks.Task<System.Int32> InvokeAsync(IConsole console = null, System.Threading.CancellationToken cancellationToken = null)
    public System.String ToString()
  public class RootCommand : Command, System.Collections.Generic.IEnumerable<Symbol>, System.Collections.IEnumerable
    public static System.String ExecutableName { get; }
    public static System.String ExecutablePath { get; }
    .ctor(System.String description = )
  public class SuggestDirective : Directive
    .ctor()
  public abstract class Symbol
    public System.String Description { get; set; }
    public System.Boolean IsHidden { get; set; }
    public System.String Name { get; }
    public System.Collections.Generic.IEnumerable<Symbol> Parents { get; }
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.CommandLine.Completions.CompletionContext context)
    public System.String ToString()
System.CommandLine.Binding
  public abstract class BinderBase<T>, IValueDescriptor<T>, IValueDescriptor, IValueSource
    protected T GetBoundValue(BindingContext bindingContext)
  public class BindingContext, System.IServiceProvider
    public System.CommandLine.IConsole Console { get; }
    public System.CommandLine.ParseResult ParseResult { get; }
    public System.Void AddService(System.Type serviceType, System.Func<System.IServiceProvider,System.Object> factory)
    public System.Void AddService<T>(Func<System.IServiceProvider,T> factory)
    public System.Object GetService(System.Type serviceType)
  public struct BoundValue : System.ValueType
    public System.Object Value { get; }
    public IValueDescriptor ValueDescriptor { get; }
    public IValueSource ValueSource { get; }
    public System.String ToString()
  public interface IValueDescriptor
    public System.Boolean HasDefaultValue { get; }
    public System.String ValueName { get; }
    public System.Type ValueType { get; }
    public System.Object GetDefaultValue()
  public interface IValueDescriptor<out T> : IValueDescriptor
  public interface IValueSource
    public System.Boolean TryGetValue(IValueDescriptor valueDescriptor, BindingContext bindingContext, ref System.Object& boundValue)
System.CommandLine.Completions
  public abstract class CompletionContext
    public static CompletionContext Empty { get; }
    public System.CommandLine.ParseResult ParseResult { get; }
    public System.String WordToComplete { get; }
  public class CompletionItem, System.IEquatable<CompletionItem>
    .ctor(System.String label, System.String kind = Value, System.String sortText = null, System.String insertText = null, System.String documentation = null, System.String detail = null)
    public System.String Detail { get; }
    public System.String Documentation { get; set; }
    public System.String InsertText { get; }
    public System.String Kind { get; }
    public System.String Label { get; }
    public System.String SortText { get; }
    public System.Boolean Equals(CompletionItem other)
    public System.Boolean Equals(System.Object obj)
    public System.Int32 GetHashCode()
    public System.String ToString()
  public class TextCompletionContext : CompletionContext
    public System.String CommandLineText { get; }
    public System.Int32 CursorPosition { get; }
    public TextCompletionContext AtCursorPosition(System.Int32 position)
  public class TokenCompletionContext : CompletionContext
System.CommandLine.Help
  public class HelpBuilder
    .ctor(System.Int32 maxWidth = 2147483647)
    public System.Int32 MaxWidth { get; }
    public System.Void CustomizeLayout(System.Func<HelpContext,System.Collections.Generic.IEnumerable<System.Action<HelpContext>>> getLayout)
    public System.Void CustomizeSymbol(System.CommandLine.Symbol symbol, System.Func<HelpContext,System.String> firstColumnText = null, System.Func<HelpContext,System.String> secondColumnText = null, System.Func<HelpContext,System.String> defaultValue = null)
    public TwoColumnHelpRow GetTwoColumnRow(System.CommandLine.Symbol symbol, HelpContext context)
    public System.Void Write(HelpContext context)
    public System.Void WriteColumns(System.Collections.Generic.IReadOnlyList<TwoColumnHelpRow> items, HelpContext context)
   static class Default
    public static System.Action<HelpContext> AdditionalArgumentsSection()
    public static System.Action<HelpContext> CommandArgumentsSection()
    public static System.Action<HelpContext> CommandUsageSection()
    public static System.String GetArgumentDefaultValue(System.CommandLine.Argument argument)
    public static System.String GetArgumentDescription(System.CommandLine.Argument argument)
    public static System.String GetArgumentUsageLabel(System.CommandLine.Argument argument)
    public static System.String GetCommandUsageLabel(System.CommandLine.Command symbol)
    public static System.Collections.Generic.IEnumerable<System.Action<HelpContext>> GetLayout()
    public static System.String GetOptionUsageLabel(System.CommandLine.Option symbol)
    public static System.Action<HelpContext> OptionsSection()
    public static System.Action<HelpContext> SubcommandsSection()
    public static System.Action<HelpContext> SynopsisSection()
  public static class HelpBuilderExtensions
    public static System.Void CustomizeSymbol(this HelpBuilder builder, System.CommandLine.Symbol symbol, System.String firstColumnText = null, System.String secondColumnText = null, System.String defaultValue = null)
    public static System.Void Write(this HelpBuilder helpBuilder, System.CommandLine.Command command, System.IO.TextWriter writer)
  public class HelpContext
    .ctor(HelpBuilder helpBuilder, System.CommandLine.Command command, System.IO.TextWriter output, System.CommandLine.ParseResult parseResult = null)
    public System.CommandLine.Command Command { get; }
    public HelpBuilder HelpBuilder { get; }
    public System.IO.TextWriter Output { get; }
    public System.CommandLine.ParseResult ParseResult { get; }
  public class TwoColumnHelpRow, System.IEquatable<TwoColumnHelpRow>
    .ctor(System.String firstColumnText, System.String secondColumnText)
    public System.String FirstColumnText { get; }
    public System.String SecondColumnText { get; }
    public System.Boolean Equals(System.Object obj)
    public System.Boolean Equals(TwoColumnHelpRow other)
    public System.Int32 GetHashCode()
System.CommandLine.Invocation
  public class InvocationContext
    .ctor(System.CommandLine.ParseResult parseResult, System.CommandLine.IConsole console = null)
    public System.CommandLine.Binding.BindingContext BindingContext { get; }
    public System.CommandLine.IConsole Console { get; set; }
    public System.Int32 ExitCode { get; set; }
    public System.CommandLine.Help.HelpBuilder HelpBuilder { get; }
    public System.Action<InvocationContext> InvocationResult { get; set; }
    public System.CommandLine.ParseResult ParseResult { get; set; }
    public T GetValue<T>(Option<T> option)
    public T GetValue<T>(Argument<T> argument)
  public delegate InvocationMiddleware : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(InvocationContext context, System.Threading.CancellationToken cancellationToken, System.Func<InvocationContext,System.Threading.CancellationToken,System.Threading.Tasks.Task> next, System.AsyncCallback callback, System.Object object)
    public System.Threading.Tasks.Task EndInvoke(System.IAsyncResult result)
    public System.Threading.Tasks.Task Invoke(InvocationContext context, System.Threading.CancellationToken cancellationToken, System.Func<InvocationContext,System.Threading.CancellationToken,System.Threading.Tasks.Task> next)
  public enum MiddlewareOrder : System.Enum, System.IComparable, System.IConvertible, System.IFormattable
    Default=0
    ErrorReporting=1000
    ExceptionHandler=-2000
    Configuration=-1000
System.CommandLine.IO
  public interface IStandardError
    public IStandardStreamWriter Error { get; }
    public System.Boolean IsErrorRedirected { get; }
  public interface IStandardIn
    public System.Boolean IsInputRedirected { get; }
  public interface IStandardOut
    public System.Boolean IsOutputRedirected { get; }
    public IStandardStreamWriter Out { get; }
  public interface IStandardStreamWriter
    public System.Void Write(System.String value)
  public static class StandardStreamWriter
    public static IStandardStreamWriter Create(System.IO.TextWriter writer)
    public static System.IO.TextWriter CreateTextWriter(this IStandardStreamWriter writer)
    public static System.Void WriteLine(this IStandardStreamWriter writer)
    public static System.Void WriteLine(this IStandardStreamWriter writer, System.String value)
  public class SystemConsole, System.CommandLine.IConsole, IStandardError, IStandardIn, IStandardOut
    .ctor()
    public IStandardStreamWriter Error { get; }
    public System.Boolean IsErrorRedirected { get; }
    public System.Boolean IsInputRedirected { get; }
    public System.Boolean IsOutputRedirected { get; }
    public IStandardStreamWriter Out { get; }
  public class TestConsole, System.CommandLine.IConsole, IStandardError, IStandardIn, IStandardOut
    .ctor()
    public IStandardStreamWriter Error { get; }
    public System.Boolean IsErrorRedirected { get; }
    public System.Boolean IsInputRedirected { get; }
    public System.Boolean IsOutputRedirected { get; }
    public IStandardStreamWriter Out { get; }
    protected System.Void set_Error(IStandardStreamWriter value)
    protected System.Void set_IsErrorRedirected(System.Boolean value)
    protected System.Void set_IsInputRedirected(System.Boolean value)
    protected System.Void set_IsOutputRedirected(System.Boolean value)
    protected System.Void set_Out(IStandardStreamWriter value)
System.CommandLine.Parsing
  public class ArgumentResult : SymbolResult
    public System.CommandLine.Argument Argument { get; }
    public System.Void AddError(System.String errorMessage)
    public System.Object GetValueOrDefault()
    public T GetValueOrDefault<T>()
    public System.Void OnlyTake(System.Int32 numberOfTokens)
    public System.String ToString()
  public class CommandResult : SymbolResult
    public System.Collections.Generic.IEnumerable<SymbolResult> Children { get; }
    public System.CommandLine.Command Command { get; }
    public Token Token { get; }
    public System.String ToString()
  public class DirectiveResult : SymbolResult
    public System.CommandLine.Directive Directive { get; }
    public Token Token { get; }
    public System.Collections.Generic.IReadOnlyList<System.String> Values { get; }
  public class OptionResult : SymbolResult
    public System.Boolean IsImplicit { get; }
    public System.CommandLine.Option Option { get; }
    public Token Token { get; }
    public System.Object GetValueOrDefault()
    public T GetValueOrDefault<T>()
    public System.String ToString()
  public class ParseError
    public System.String Message { get; }
    public SymbolResult SymbolResult { get; }
    public System.String ToString()
  public static class Parser
    public static System.CommandLine.ParseResult Parse(System.CommandLine.Command command, System.Collections.Generic.IReadOnlyList<System.String> args, System.CommandLine.CommandLineConfiguration configuration = null)
    public static System.CommandLine.ParseResult Parse(System.CommandLine.Command command, System.String commandLine, System.CommandLine.CommandLineConfiguration configuration = null)
    public static System.Collections.Generic.IEnumerable<System.String> SplitCommandLine(System.String commandLine)
  public static class ParseResultExtensions
    public static System.String Diagram(this System.CommandLine.ParseResult parseResult)
  public abstract class SymbolResult
    public SymbolResult Parent { get; }
    public System.Collections.Generic.IReadOnlyList<Token> Tokens { get; }
    public System.Void AddError(System.String errorMessage)
    public ArgumentResult FindResultFor(System.CommandLine.Argument argument)
    public CommandResult FindResultFor(System.CommandLine.Command command)
    public OptionResult FindResultFor(System.CommandLine.Option option)
    public DirectiveResult FindResultFor(System.CommandLine.Directive directive)
    public T GetValue<T>(Argument<T> argument)
    public T GetValue<T>(Option<T> option)
  public class Token, System.IEquatable<Token>
    public static System.Boolean op_Equality(Token left, Token right)
    public static System.Boolean op_Inequality(Token left, Token right)
    .ctor(System.String value, TokenType type, System.CommandLine.Symbol symbol)
    public TokenType Type { get; }
    public System.String Value { get; }
    public System.Boolean Equals(System.Object obj)
    public System.Boolean Equals(Token other)
    public System.Int32 GetHashCode()
    public System.String ToString()
  public enum TokenType : System.Enum, System.IComparable, System.IConvertible, System.IFormattable
    Argument=0
    Command=1
    Option=2
    DoubleDash=3
    Directive=4
  public delegate TryReplaceToken : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(System.String tokenToReplace, ref System.Collections.Generic.IReadOnlyList<System.String> replacementTokens, ref System.String& errorMessage, System.AsyncCallback callback, System.Object object)
    public System.Boolean EndInvoke(ref System.Collections.Generic.IReadOnlyList<System.String> replacementTokens, ref System.String& errorMessage, System.IAsyncResult result)
    public System.Boolean Invoke(System.String tokenToReplace, ref System.Collections.Generic.IReadOnlyList<System.String> replacementTokens, ref System.String& errorMessage)
