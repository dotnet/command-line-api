System.CommandLine
  public class Argument : Symbol, System.CommandLine.Binding.IValueDescriptor, System.CommandLine.Completions.ICompletionSource
    .ctor()
    .ctor(System.String name = null, System.String description = null)
    public ArgumentArity Arity { get; set; }
    public CompletionSourceList Completions { get; }
    public System.Boolean HasDefaultValue { get; }
    public System.String HelpName { get; set; }
    public System.Type ValueType { get; set; }
    public System.Void AddValidator(System.CommandLine.Parsing.ValidateSymbolResult<System.CommandLine.Parsing.ArgumentResult> validate)
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.CommandLine.Completions.CompletionContext context)
    public System.Object GetDefaultValue()
    public System.Void SetDefaultValue(System.Object value)
    public System.Void SetDefaultValueFactory(System.Func<System.Object> getDefaultValue)
    public System.Void SetDefaultValueFactory(System.Func<System.CommandLine.Parsing.ArgumentResult,System.Object> getDefaultValue)
    public System.String ToString()
  public class Argument<T> : Argument, IValueDescriptor<T>, System.CommandLine.Binding.IValueDescriptor, System.CommandLine.Completions.ICompletionSource
    .ctor()
    .ctor(System.String name, System.String description = null)
    .ctor(System.String name, Func<T> getDefaultValue, System.String description = null)
    .ctor(Func<T> getDefaultValue)
    .ctor(System.String name, ParseArgument<T> parse, System.Boolean isDefault = False, System.String description = null)
    .ctor(ParseArgument<T> parse, System.Boolean isDefault = False)
    public System.Type ValueType { get; set; }
  public struct ArgumentArity : System.ValueType, System.IEquatable<ArgumentArity>
    public static ArgumentArity ExactlyOne { get; }
    public static ArgumentArity OneOrMore { get; }
    public static ArgumentArity Zero { get; }
    public static ArgumentArity ZeroOrMore { get; }
    public static ArgumentArity ZeroOrOne { get; }
    .ctor(System.Int32 minimumNumberOfValues, System.Int32 maximumNumberOfValues)
    public System.Int32 MaximumNumberOfValues { get; }
    public System.Int32 MinimumNumberOfValues { get; }
    public System.Boolean Equals(ArgumentArity other)
    public System.Boolean Equals(System.Object obj)
    public System.Int32 GetHashCode()
  public static class ArgumentExtensions
    public static TArgument AddCompletions<TArgument>(this TArgument argument, System.String[] values)
    public static TArgument AddCompletions<TArgument>(this TArgument argument, System.Func<System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable<System.String>> complete)
    public static TArgument AddCompletions<TArgument>(this TArgument argument, System.CommandLine.Completions.CompletionDelegate complete)
    public static Argument<System.IO.FileInfo> ExistingOnly(this Argument<System.IO.FileInfo> argument)
    public static Argument<System.IO.DirectoryInfo> ExistingOnly(this Argument<System.IO.DirectoryInfo> argument)
    public static Argument<System.IO.FileSystemInfo> ExistingOnly(this Argument<System.IO.FileSystemInfo> argument)
    public static Argument<T> ExistingOnly<T>(this Argument<T> argument)
    public static TArgument FromAmong<TArgument>(this TArgument argument, System.String[] values)
    public static TArgument LegalFileNamesOnly<TArgument>(this TArgument argument)
    public static TArgument LegalFilePathsOnly<TArgument>(this TArgument argument)
    public static System.CommandLine.Parsing.ParseResult Parse(this Argument argument, System.String commandLine)
    public static System.CommandLine.Parsing.ParseResult Parse(this Argument argument, System.String[] args)
  public class Command : IdentifierSymbol, System.Collections.Generic.IEnumerable<Symbol>, System.Collections.IEnumerable, System.CommandLine.Completions.ICompletionSource
    .ctor(System.String name, System.String description = null)
    public System.Collections.Generic.IReadOnlyList<Argument> Arguments { get; }
    public System.CommandLine.Collections.SymbolSet Children { get; }
    public System.CommandLine.Invocation.ICommandHandler Handler { get; set; }
    public System.Collections.Generic.IReadOnlyList<Option> Options { get; }
    public System.Boolean TreatUnmatchedTokensAsErrors { get; set; }
    public System.Void Add(Symbol symbol)
    public System.Void Add(Argument argument)
    public System.Void AddArgument(Argument argument)
    public System.Void AddCommand(Command command)
    public System.Void AddGlobalOption(Option option)
    public System.Void AddOption(Option option)
    public System.Void AddValidator(System.CommandLine.Parsing.ValidateSymbolResult<System.CommandLine.Parsing.CommandResult> validate)
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.CommandLine.Completions.CompletionContext context)
    public System.Collections.Generic.IEnumerator<Symbol> GetEnumerator()
  public static class CommandExtensions
    public static System.Int32 Invoke(this Command command, System.String[] args, IConsole console = null)
    public static System.Int32 Invoke(this Command command, System.String commandLine, IConsole console = null)
    public static System.Threading.Tasks.Task<System.Int32> InvokeAsync(this Command command, System.String[] args, IConsole console = null)
    public static System.Threading.Tasks.Task<System.Int32> InvokeAsync(this Command command, System.String commandLine, IConsole console = null)
    public static System.CommandLine.Parsing.ParseResult Parse(this Command command, System.String[] args)
    public static System.CommandLine.Parsing.ParseResult Parse(this Command command, System.String commandLine)
  public class CommandLineConfiguration
    .ctor(Command command, System.Boolean enablePosixBundling = True, System.Boolean enableDirectives = True, System.Boolean enableLegacyDoubleDashBehavior = False, LocalizationResources resources = null, System.CommandLine.Parsing.ResponseFileHandling responseFileHandling = ParseArgsAsLineSeparated, System.Collections.Generic.IReadOnlyList<System.CommandLine.Invocation.InvocationMiddleware> middlewarePipeline = null, System.Func<System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder> helpBuilderFactory = null)
    public System.Boolean EnableDirectives { get; }
    public System.Boolean EnableLegacyDoubleDashBehavior { get; }
    public System.Boolean EnablePosixBundling { get; }
    public LocalizationResources LocalizationResources { get; }
    public Command RootCommand { get; }
    public System.CommandLine.Collections.SymbolSet Symbols { get; }
  public static class CompletionSourceExtensions
    public static System.Void Add(this CompletionSourceList completionSources, System.Func<System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable<System.String>> complete)
    public static System.Void Add(this CompletionSourceList completionSources, System.CommandLine.Completions.CompletionDelegate complete)
    public static System.Void Add(this CompletionSourceList completionSources, System.String[] completions)
  public class CompletionSourceList, System.Collections.Generic.IEnumerable<System.CommandLine.Completions.ICompletionSource>, System.Collections.Generic.IReadOnlyCollection<System.CommandLine.Completions.ICompletionSource>, System.Collections.Generic.IReadOnlyList<System.CommandLine.Completions.ICompletionSource>, System.Collections.IEnumerable
    .ctor()
    public System.Int32 Count { get; }
    public System.CommandLine.Completions.ICompletionSource Item { get; }
    public System.Void Add(System.CommandLine.Completions.ICompletionSource source)
    public System.Void Clear()
    public System.Collections.Generic.IEnumerator<System.CommandLine.Completions.ICompletionSource> GetEnumerator()
  public static class ConsoleExtensions
    public static System.Void Write(this IConsole console, System.String value)
    public static System.Void WriteLine(this IConsole console, System.String value)
  public class DirectiveCollection, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Collections.Generic.IEnumerable<System.String>>>, System.Collections.IEnumerable
    .ctor()
    public System.Boolean Contains(System.String name)
    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Collections.Generic.IEnumerable<System.String>>> GetEnumerator()
    public System.Boolean TryGetValues(System.String name, ref System.Collections.Generic.IReadOnlyList<System.String> values)
  public static class Handler
    public static System.Void SetHandler(this Command command, System.Action handle)
    public static System.Void SetHandler(this Command command, System.Func<System.Threading.Tasks.Task> handle)
    public static System.Void SetHandler<T>(this Command command, Action<T> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2>(this Command command, Action<T1,T2> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3>(this Command command, Action<T1,T2,T3> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4>(this Command command, Action<T1,T2,T3,T4> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5>(this Command command, Action<T1,T2,T3,T4,T5> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6>(this Command command, Action<T1,T2,T3,T4,T5,T6> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7>(this Command command, Action<T1,T2,T3,T4,T5,T6,T7> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8>(this Command command, Action<T1,T2,T3,T4,T5,T6,T7,T8> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Command command, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Command command, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Command command, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Command command, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Command command, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Command command, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Command command, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this Command command, Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T>(this Command command, Func<T,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2>(this Command command, Func<T1,T2,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3>(this Command command, Func<T1,T2,T3,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4>(this Command command, Func<T1,T2,T3,T4,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5>(this Command command, Func<T1,T2,T3,T4,T5,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6>(this Command command, Func<T1,T2,T3,T4,T5,T6,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7>(this Command command, Func<T1,T2,T3,T4,T5,T6,T7,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8>(this Command command, Func<T1,T2,T3,T4,T5,T6,T7,T8,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Command command, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Command command, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Command command, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Command command, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Command command, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Command command, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Command command, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
    public static System.Void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this Command command, Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,System.Threading.Tasks.Task> handle, System.CommandLine.Binding.IValueDescriptor[] symbols)
  public interface IConsole : System.CommandLine.IO.IStandardError, System.CommandLine.IO.IStandardIn, System.CommandLine.IO.IStandardOut
  public abstract class IdentifierSymbol : Symbol, System.CommandLine.Completions.ICompletionSource
    public System.Collections.Generic.IReadOnlyCollection<System.String> Aliases { get; }
    public System.String Name { get; set; }
    public System.Void AddAlias(System.String alias)
    public System.Boolean HasAlias(System.String alias)
  public class LocalizationResources
    public static LocalizationResources Instance { get; }
    public System.String ArgumentConversionCannotParse(System.String value, System.Type expectedType)
    public System.String ArgumentConversionCannotParseForCommand(System.String value, System.String commandAlias, System.Type expectedType)
    public System.String ArgumentConversionCannotParseForOption(System.String value, System.String optionAlias, System.Type expectedType)
    public System.String DirectoryDoesNotExist(System.String path)
    public System.String ErrorReadingResponseFile(System.String filePath, System.IO.IOException e)
    public System.String ExceptionHandlerHeader()
    public System.String ExpectsFewerArguments(System.CommandLine.Parsing.Token token, System.Int32 providedNumberOfValues, System.Int32 maximumNumberOfValues)
    public System.String ExpectsOneArgument(System.CommandLine.Parsing.SymbolResult symbolResult)
    public System.String FileDoesNotExist(System.String filePath)
    public System.String FileOrDirectoryDoesNotExist(System.String path)
    protected System.String GetResourceString(System.String resourceString, System.Object[] formatArguments)
    public System.String HelpAdditionalArgumentsDescription()
    public System.String HelpAdditionalArgumentsTitle()
    public System.String HelpArgumentDefaultValueLabel()
    public System.String HelpArgumentsTitle()
    public System.String HelpCommandsTitle()
    public System.String HelpDescriptionTitle()
    public System.String HelpOptionDescription()
    public System.String HelpOptionsRequiredLabel()
    public System.String HelpOptionsTitle()
    public System.String HelpUsageAdditionalArguments()
    public System.String HelpUsageCommand()
    public System.String HelpUsageOptions()
    public System.String HelpUsageTitle()
    public System.String InvalidCharactersInFileName(System.Char invalidChar)
    public System.String InvalidCharactersInPath(System.Char invalidChar)
    public System.String NoArgumentProvided(System.CommandLine.Parsing.SymbolResult symbolResult)
    public System.String RequiredArgumentMissing(System.CommandLine.Parsing.SymbolResult symbolResult)
    public System.String RequiredCommandWasNotProvided()
    public System.String ResponseFileNotFound(System.String filePath)
    public System.String SuggestionsTokenNotMatched(System.String token)
    public System.String UnrecognizedArgument(System.String unrecognizedArg, System.Collections.Generic.IReadOnlyCollection<System.String> allowedValues)
    public System.String UnrecognizedCommandOrArgument(System.String arg)
    public System.String VersionOptionCannotBeCombinedWithOtherArguments(System.String optionAlias)
    public System.String VersionOptionDescription()
  public class Option : IdentifierSymbol, System.CommandLine.Binding.IValueDescriptor, System.CommandLine.Completions.ICompletionSource
    .ctor(System.String name, System.String description = null, System.Type argumentType = null, System.Func<System.Object> getDefaultValue = null, ArgumentArity arity = null)
    .ctor(System.String[] aliases, System.String description = null, System.Type argumentType = null, System.Func<System.Object> getDefaultValue = null, ArgumentArity arity = null)
    public System.Boolean AllowMultipleArgumentsPerToken { get; set; }
    public System.String ArgumentHelpName { get; set; }
    public ArgumentArity Arity { get; set; }
    public System.Boolean IsRequired { get; set; }
    public System.Type ValueType { get; }
    public System.Void AddValidator(System.CommandLine.Parsing.ValidateSymbolResult<System.CommandLine.Parsing.OptionResult> validate)
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.CommandLine.Completions.CompletionContext context)
    public System.Boolean HasAliasIgnoringPrefix(System.String alias)
    public System.Void SetDefaultValue(System.Object value)
    public System.Void SetDefaultValueFactory(System.Func<System.Object> getDefaultValue)
  public class Option<T> : Option, IValueDescriptor<T>, System.CommandLine.Binding.IValueDescriptor, System.CommandLine.Completions.ICompletionSource
    .ctor(System.String name, System.String description = null)
    .ctor(System.String[] aliases, System.String description = null)
    .ctor(System.String name, ParseArgument<T> parseArgument, System.Boolean isDefault = False, System.String description = null)
    .ctor(System.String[] aliases, ParseArgument<T> parseArgument, System.Boolean isDefault = False, System.String description = null)
    .ctor(System.String name, Func<T> getDefaultValue, System.String description = null)
    .ctor(System.String[] aliases, Func<T> getDefaultValue, System.String description = null)
    public ArgumentArity Arity { get; set; }
  public static class OptionExtensions
    public static TOption AddCompletions<TOption>(this TOption option, System.String[] values)
    public static TOption AddCompletions<TOption>(this TOption option, System.Func<System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable<System.String>> complete)
    public static TOption AddCompletions<TOption>(this TOption option, System.CommandLine.Completions.CompletionDelegate complete)
    public static Option<System.IO.FileInfo> ExistingOnly(this Option<System.IO.FileInfo> option)
    public static Option<System.IO.DirectoryInfo> ExistingOnly(this Option<System.IO.DirectoryInfo> option)
    public static Option<System.IO.FileSystemInfo> ExistingOnly(this Option<System.IO.FileSystemInfo> option)
    public static Option<T> ExistingOnly<T>(this Option<T> option)
    public static TOption FromAmong<TOption>(this TOption option, System.String[] values)
    public static TOption LegalFileNamesOnly<TOption>(this TOption option)
    public static TOption LegalFilePathsOnly<TOption>(this TOption option)
    public static System.CommandLine.Parsing.ParseResult Parse(this Option option, System.String commandLine)
    public static System.CommandLine.Parsing.ParseResult Parse(this Option option, System.String[] args)
  public class RootCommand : Command, System.Collections.Generic.IEnumerable<Symbol>, System.Collections.IEnumerable, System.CommandLine.Completions.ICompletionSource
    public static System.String ExecutableName { get; }
    public static System.String ExecutablePath { get; }
    .ctor(System.String description = )
  public abstract class Symbol, System.CommandLine.Completions.ICompletionSource
    public System.String Description { get; set; }
    public System.Boolean IsHidden { get; set; }
    public System.String Name { get; set; }
    public System.Collections.Generic.IEnumerable<Symbol> Parents { get; }
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions()
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.CommandLine.Completions.CompletionContext context)
    public System.String ToString()
System.CommandLine.Binding
  public abstract class BinderBase<T>, IValueDescriptor<T>, IValueDescriptor, IValueSource
    protected T GetBoundValue(BindingContext bindingContext)
  public class BindingContext, System.IServiceProvider
    public System.CommandLine.IConsole Console { get; }
    public System.CommandLine.Parsing.ParseResult ParseResult { get; }
    public System.Void AddService(System.Type serviceType, System.Func<System.IServiceProvider,System.Object> factory)
    public System.Void AddService<T>(Func<System.IServiceProvider,T> factory)
    public System.Object GetService(System.Type serviceType)
  public struct BoundValue : System.ValueType
    public static BoundValue DefaultForValueDescriptor(IValueDescriptor valueDescriptor)
    public System.Object Value { get; }
    public IValueDescriptor ValueDescriptor { get; }
    public IValueSource ValueSource { get; }
    public System.String ToString()
  public interface IValueDescriptor
    public System.Boolean HasDefaultValue { get; }
    public System.String ValueName { get; }
    public System.Type ValueType { get; }
    public System.Object GetDefaultValue()
  public interface IValueDescriptor<out T> : IValueDescriptor
  public interface IValueSource
    public System.Boolean TryGetValue(IValueDescriptor valueDescriptor, BindingContext bindingContext, ref System.Object& boundValue)
System.CommandLine.Builder
  public class CommandLineBuilder
    .ctor(System.CommandLine.Command rootCommand = null)
    public System.CommandLine.Command Command { get; }
    public System.Boolean EnableDirectives { get; set; }
    public System.Boolean EnableLegacyDoubleDashBehavior { get; set; }
    public System.Boolean EnablePosixBundling { get; set; }
    public System.CommandLine.Parsing.ResponseFileHandling ResponseFileHandling { get; set; }
    public System.CommandLine.Parsing.Parser Build()
  public static class CommandLineBuilderExtensions
    public static CommandLineBuilder AddMiddleware(this CommandLineBuilder builder, System.CommandLine.Invocation.InvocationMiddleware middleware, System.CommandLine.Invocation.MiddlewareOrder order = Default)
    public static CommandLineBuilder AddMiddleware(this CommandLineBuilder builder, System.Action<System.CommandLine.Invocation.InvocationContext> onInvoke, System.CommandLine.Invocation.MiddlewareOrder order = Default)
    public static CommandLineBuilder CancelOnProcessTermination(this CommandLineBuilder builder)
    public static CommandLineBuilder EnableDirectives(this CommandLineBuilder builder, System.Boolean value = True)
    public static CommandLineBuilder EnableLegacyDoubleDashBehavior(this CommandLineBuilder builder, System.Boolean value = True)
    public static CommandLineBuilder EnablePosixBundling(this CommandLineBuilder builder, System.Boolean value = True)
    public static CommandLineBuilder ParseResponseFileAs(this CommandLineBuilder builder, System.CommandLine.Parsing.ResponseFileHandling responseFileHandling)
    public static CommandLineBuilder RegisterWithDotnetSuggest(this CommandLineBuilder builder)
    public static CommandLineBuilder UseDefaults(this CommandLineBuilder builder)
    public static CommandLineBuilder UseEnvironmentVariableDirective(this CommandLineBuilder builder)
    public static CommandLineBuilder UseExceptionHandler(this CommandLineBuilder builder, System.Action<System.Exception,System.CommandLine.Invocation.InvocationContext> onException = null, System.Nullable<System.Int32> errorExitCode = null)
    public static CommandLineBuilder UseHelp(this CommandLineBuilder builder, System.Nullable<System.Int32> maxWidth = null)
    public static CommandLineBuilder UseHelp(this CommandLineBuilder builder, System.String[] helpAliases)
    public static CommandLineBuilder UseHelp(this CommandLineBuilder builder, System.Action<System.CommandLine.Help.HelpContext> customize, System.Nullable<System.Int32> maxWidth = null)
    public static TBuilder UseHelpBuilder<TBuilder>(this TBuilder builder, System.Func<System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder> getHelpBuilder)
    public static CommandLineBuilder UseLocalizationResources(this CommandLineBuilder builder, System.CommandLine.LocalizationResources validationMessages)
    public static CommandLineBuilder UseMiddleware(this CommandLineBuilder builder, System.CommandLine.Invocation.InvocationMiddleware middleware, System.CommandLine.Invocation.MiddlewareOrder order = Default)
    public static CommandLineBuilder UseMiddleware(this CommandLineBuilder builder, System.Action<System.CommandLine.Invocation.InvocationContext> onInvoke, System.CommandLine.Invocation.MiddlewareOrder order = Default)
    public static CommandLineBuilder UseParseDirective(this CommandLineBuilder builder, System.Nullable<System.Int32> errorExitCode = null)
    public static CommandLineBuilder UseParseErrorReporting(this CommandLineBuilder builder, System.Nullable<System.Int32> errorExitCode = null)
    public static CommandLineBuilder UseSuggestDirective(this CommandLineBuilder builder)
    public static CommandLineBuilder UseTypoCorrections(this CommandLineBuilder builder, System.Int32 maxLevenshteinDistance = 3)
    public static CommandLineBuilder UseVersionOption(this CommandLineBuilder builder)
    public static CommandLineBuilder UseVersionOption(this CommandLineBuilder builder, System.String[] aliases)
System.CommandLine.Collections
  public class SymbolSet, System.Collections.Generic.IEnumerable<System.CommandLine.Symbol>, System.Collections.Generic.IReadOnlyCollection<System.CommandLine.Symbol>, System.Collections.Generic.IReadOnlyList<System.CommandLine.Symbol>, System.Collections.IEnumerable
    .ctor()
    public System.Int32 Count { get; }
    public System.CommandLine.Symbol Item { get; }
    public System.Collections.Generic.IEnumerator<System.CommandLine.Symbol> GetEnumerator()
System.CommandLine.Completions
  public abstract class CompletionContext
    public System.CommandLine.Parsing.ParseResult ParseResult { get; }
    public System.String WordToComplete { get; }
  public delegate CompletionDelegate : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(CompletionContext context, System.AsyncCallback callback, System.Object object)
    public System.Collections.Generic.IEnumerable<CompletionItem> EndInvoke(System.IAsyncResult result)
    public System.Collections.Generic.IEnumerable<CompletionItem> Invoke(CompletionContext context)
  public class CompletionItem
    .ctor(System.String label, System.String kind = Value, System.String sortText = null, System.String insertText = null, System.String documentation = null, System.String detail = null)
    public System.String Detail { get; }
    public System.String Documentation { get; set; }
    public System.String InsertText { get; }
    public System.String Kind { get; }
    public System.String Label { get; }
    public System.String SortText { get; }
    protected System.Boolean Equals(CompletionItem other)
    public System.Boolean Equals(System.Object obj)
    public System.Int32 GetHashCode()
    public System.String ToString()
  public interface ICompletionSource
    public System.Collections.Generic.IEnumerable<CompletionItem> GetCompletions(CompletionContext context)
  public class TextCompletionContext : CompletionContext
    public System.String CommandLineText { get; }
    public System.Int32 CursorPosition { get; }
    public TextCompletionContext AtCursorPosition(System.Int32 position)
  public class TokenCompletionContext : CompletionContext
System.CommandLine.Help
  public class HelpBuilder
    .ctor(System.CommandLine.LocalizationResources localizationResources, System.Int32 maxWidth = 2147483647)
    public System.CommandLine.LocalizationResources LocalizationResources { get; }
    public System.Int32 MaxWidth { get; }
    public System.Void CustomizeLayout(System.Func<HelpContext,System.Collections.Generic.IEnumerable<HelpSectionDelegate>> getLayout)
    public System.Void CustomizeSymbol(System.CommandLine.Symbol symbol, System.Func<HelpContext,System.String> firstColumnText = null, System.Func<HelpContext,System.String> secondColumnText = null, System.Func<HelpContext,System.String> defaultValue = null)
    public TwoColumnHelpRow GetTwoColumnRow(System.CommandLine.Symbol symbol, HelpContext context)
    public System.Void Write(HelpContext context)
    public System.Void WriteColumns(System.Collections.Generic.IReadOnlyList<TwoColumnHelpRow> items, HelpContext context)
   static class Default
    public static HelpSectionDelegate AdditionalArgumentsSection()
    public static HelpSectionDelegate CommandArgumentsSection()
    public static HelpSectionDelegate CommandUsageSection()
    public static System.String GetArgumentDefaultValue(System.CommandLine.Argument argument)
    public static System.String GetArgumentDescription(System.CommandLine.Argument argument)
    public static System.String GetArgumentUsageLabel(System.CommandLine.Argument argument)
    public static System.String GetIdentifierSymbolDescription(System.CommandLine.IdentifierSymbol symbol)
    public static System.String GetIdentifierSymbolUsageLabel(System.CommandLine.IdentifierSymbol symbol, HelpContext context)
    public static System.Collections.Generic.IEnumerable<HelpSectionDelegate> GetLayout()
    public static HelpSectionDelegate OptionsSection()
    public static HelpSectionDelegate SubcommandsSection()
    public static HelpSectionDelegate SynopsisSection()
  public static class HelpBuilderExtensions
    public static System.Void CustomizeSymbol(this HelpBuilder builder, System.CommandLine.Symbol symbol, System.String firstColumnText = null, System.String secondColumnText = null, System.String defaultValue = null)
    public static System.Void Write(this HelpBuilder helpBuilder, System.CommandLine.Command command, System.IO.TextWriter writer)
  public class HelpContext
    .ctor(HelpBuilder helpBuilder, System.CommandLine.Command command, System.IO.TextWriter output, System.CommandLine.Parsing.ParseResult parseResult = null)
    public System.CommandLine.Command Command { get; }
    public HelpBuilder HelpBuilder { get; }
    public System.IO.TextWriter Output { get; }
    public System.CommandLine.Parsing.ParseResult ParseResult { get; }
  public delegate HelpSectionDelegate : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(HelpContext context, System.AsyncCallback callback, System.Object object)
    public System.Void EndInvoke(System.IAsyncResult result)
    public System.Void Invoke(HelpContext context)
  public class TwoColumnHelpRow, System.IEquatable<TwoColumnHelpRow>
    .ctor(System.String firstColumnText, System.String secondColumnText)
    public System.String FirstColumnText { get; }
    public System.String SecondColumnText { get; }
    public System.Boolean Equals(System.Object obj)
    public System.Boolean Equals(TwoColumnHelpRow other)
    public System.Int32 GetHashCode()
System.CommandLine.Invocation
  public interface ICommandHandler
    public System.Threading.Tasks.Task<System.Int32> InvokeAsync(InvocationContext context)
  public interface IInvocationResult
    public System.Void Apply(InvocationContext context)
  public class InvocationContext, System.IDisposable
    .ctor(System.CommandLine.Parsing.ParseResult parseResult, System.CommandLine.IConsole console = null)
    public System.CommandLine.Binding.BindingContext BindingContext { get; }
    public System.CommandLine.IConsole Console { get; set; }
    public System.Int32 ExitCode { get; set; }
    public System.CommandLine.Help.HelpBuilder HelpBuilder { get; }
    public IInvocationResult InvocationResult { get; set; }
    public System.CommandLine.LocalizationResources LocalizationResources { get; }
    public System.CommandLine.Parsing.Parser Parser { get; }
    public System.CommandLine.Parsing.ParseResult ParseResult { get; set; }
    public System.Void Dispose()
    public System.Threading.CancellationToken GetCancellationToken()
  public delegate InvocationMiddleware : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(InvocationContext context, System.Func<InvocationContext,System.Threading.Tasks.Task> next, System.AsyncCallback callback, System.Object object)
    public System.Threading.Tasks.Task EndInvoke(System.IAsyncResult result)
    public System.Threading.Tasks.Task Invoke(InvocationContext context, System.Func<InvocationContext,System.Threading.Tasks.Task> next)
  public enum MiddlewareOrder : System.Enum, System.IComparable, System.IConvertible, System.IFormattable
    Default=0
    ErrorReporting=1000
    ExceptionHandler=-2000
    Configuration=-1000
System.CommandLine.IO
  public interface IStandardError
    public IStandardStreamWriter Error { get; }
    public System.Boolean IsErrorRedirected { get; }
  public interface IStandardIn
    public System.Boolean IsInputRedirected { get; }
  public interface IStandardOut
    public System.Boolean IsOutputRedirected { get; }
    public IStandardStreamWriter Out { get; }
  public interface IStandardStreamWriter
    public System.Void Write(System.String value)
  public static class StandardStreamWriter
    public static IStandardStreamWriter Create(System.IO.TextWriter writer)
    public static System.IO.TextWriter CreateTextWriter(this IStandardStreamWriter writer)
    public static System.Void WriteLine(this IStandardStreamWriter writer)
    public static System.Void WriteLine(this IStandardStreamWriter writer, System.String value)
  public class SystemConsole, System.CommandLine.IConsole, IStandardError, IStandardIn, IStandardOut
    .ctor()
    public IStandardStreamWriter Error { get; }
    public System.Boolean IsErrorRedirected { get; }
    public System.Boolean IsInputRedirected { get; }
    public System.Boolean IsOutputRedirected { get; }
    public IStandardStreamWriter Out { get; }
  public class TestConsole, System.CommandLine.IConsole, IStandardError, IStandardIn, IStandardOut
    .ctor()
    public IStandardStreamWriter Error { get; }
    public System.Boolean IsErrorRedirected { get; }
    public System.Boolean IsInputRedirected { get; }
    public System.Boolean IsOutputRedirected { get; }
    public IStandardStreamWriter Out { get; }
    protected System.Void set_Error(IStandardStreamWriter value)
    protected System.Void set_IsErrorRedirected(System.Boolean value)
    protected System.Void set_IsInputRedirected(System.Boolean value)
    protected System.Void set_IsOutputRedirected(System.Boolean value)
    protected System.Void set_Out(IStandardStreamWriter value)
System.CommandLine.Parsing
  public class ArgumentResult : SymbolResult
    public System.CommandLine.Argument Argument { get; }
    public System.Object GetValueOrDefault()
    public T GetValueOrDefault<T>()
    public System.Void OnlyTake(System.Int32 numberOfTokens)
    public System.String ToString()
  public class CommandLineStringSplitter
    public System.Collections.Generic.IEnumerable<System.String> Split(System.String commandLine)
  public class CommandResult : SymbolResult
    public System.CommandLine.Command Command { get; }
    public Token Token { get; }
  public class OptionResult : SymbolResult
    public System.Boolean IsImplicit { get; }
    public System.CommandLine.Option Option { get; }
    public Token Token { get; }
    public System.Object GetValueOrDefault()
    public T GetValueOrDefault<T>()
  public delegate ParseArgument<out T> : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(ArgumentResult result, System.AsyncCallback callback, System.Object object)
    public T EndInvoke(System.IAsyncResult result)
    public T Invoke(ArgumentResult result)
  public class ParseError
    public System.String Message { get; }
    public SymbolResult SymbolResult { get; }
    public System.String ToString()
  public class Parser
    .ctor(System.CommandLine.CommandLineConfiguration configuration)
    .ctor(System.CommandLine.Command command)
    .ctor()
    public System.CommandLine.CommandLineConfiguration Configuration { get; }
    public ParseResult Parse(System.Collections.Generic.IReadOnlyList<System.String> arguments, System.String rawInput = null)
  public class ParseResult
    public CommandResult CommandResult { get; }
    public System.CommandLine.DirectiveCollection Directives { get; }
    public System.Collections.Generic.IReadOnlyList<ParseError> Errors { get; }
    public Parser Parser { get; }
    public CommandResult RootCommandResult { get; }
    public System.Collections.Generic.IReadOnlyList<Token> Tokens { get; }
    public System.Collections.Generic.IReadOnlyList<System.String> UnmatchedTokens { get; }
    public System.Collections.Generic.IReadOnlyList<System.String> UnparsedTokens { get; }
    public ArgumentResult FindResultFor(System.CommandLine.Argument argument)
    public CommandResult FindResultFor(System.CommandLine.Command command)
    public OptionResult FindResultFor(System.CommandLine.Option option)
    public SymbolResult FindResultFor(System.CommandLine.Symbol symbol)
    public System.CommandLine.Completions.CompletionContext GetCompletionContext()
    public System.Collections.Generic.IEnumerable<System.CommandLine.Completions.CompletionItem> GetCompletions(System.Nullable<System.Int32> position = null)
    public System.Object GetValueForArgument(System.CommandLine.Argument argument)
    public T GetValueForArgument<T>(Argument<T> argument)
    public T GetValueForArgument<T>(System.CommandLine.Argument argument)
    public System.Object GetValueForOption(System.CommandLine.Option option)
    public T GetValueForOption<T>(Option<T> option)
    public T GetValueForOption<T>(System.CommandLine.Option option)
    public System.String ToString()
    public System.Object ValueForArgument(System.String alias)
    public System.Object ValueForArgument(System.CommandLine.Argument argument)
    public T ValueForArgument<T>(Argument<T> argument)
    public T ValueForArgument<T>(System.String name)
    public System.Object ValueForOption(System.String alias)
    public System.Object ValueForOption(System.CommandLine.Option option)
    public T ValueForOption<T>(Option<T> option)
    public T ValueForOption<T>(System.String alias)
  public static class ParseResultExtensions
    public static System.String Diagram(this ParseResult parseResult)
    public static System.Boolean HasOption(this ParseResult parseResult, System.CommandLine.Option option)
    public static System.Boolean HasOption(this ParseResult parseResult, System.String alias)
    public static System.Int32 Invoke(this ParseResult parseResult, System.CommandLine.IConsole console = null)
    public static System.Threading.Tasks.Task<System.Int32> InvokeAsync(this ParseResult parseResult, System.CommandLine.IConsole console = null)
  public static class ParserExtensions
    public static System.Int32 Invoke(this Parser parser, System.String commandLine, System.CommandLine.IConsole console = null)
    public static System.Int32 Invoke(this Parser parser, System.String[] args, System.CommandLine.IConsole console = null)
    public static System.Threading.Tasks.Task<System.Int32> InvokeAsync(this Parser parser, System.String commandLine, System.CommandLine.IConsole console = null)
    public static System.Threading.Tasks.Task<System.Int32> InvokeAsync(this Parser parser, System.String[] args, System.CommandLine.IConsole console = null)
    public static ParseResult Parse(this Parser parser, System.String commandLine)
  public enum ResponseFileHandling : System.Enum, System.IComparable, System.IConvertible, System.IFormattable
    ParseArgsAsLineSeparated=0
    ParseArgsAsSpaceSeparated=1
    Disabled=2
  public abstract class SymbolResult
    public System.Collections.Generic.IReadOnlyList<SymbolResult> Children { get; }
    public System.String ErrorMessage { get; set; }
    public System.CommandLine.LocalizationResources LocalizationResources { get; set; }
    public SymbolResult Parent { get; }
    public System.CommandLine.Symbol Symbol { get; }
    public System.Collections.Generic.IReadOnlyList<Token> Tokens { get; }
    public ArgumentResult FindResultFor(System.CommandLine.Argument argument)
    public CommandResult FindResultFor(System.CommandLine.Command command)
    public OptionResult FindResultFor(System.CommandLine.Option option)
    public System.String ToString()
  public struct Token : System.ValueType, System.IEquatable<Token>
    public static System.Boolean op_Equality(Token left, Token right)
    public static System.Boolean op_Inequality(Token left, Token right)
    .ctor(System.String value, TokenType type, System.CommandLine.Symbol symbol)
    public TokenType Type { get; }
    public System.String Value { get; }
    public System.Boolean Equals(System.Object obj)
    public System.Boolean Equals(Token other)
    public System.Int32 GetHashCode()
    public System.String ToString()
  public class TokenizeError
    public System.String Message { get; }
    public System.String ToString()
  public enum TokenType : System.Enum, System.IComparable, System.IConvertible, System.IFormattable
    Argument=0
    Command=1
    Option=2
    DoubleDash=3
    Unparsed=4
    Directive=5
  public delegate ValidateSymbolResult<in T> : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(T symbolResult, System.AsyncCallback callback, System.Object object)
    public System.Void EndInvoke(System.IAsyncResult result)
    public System.Void Invoke(T symbolResult)
